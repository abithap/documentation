<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept-wr PUBLIC "-//WindRiver.com//DTD DITA 1.2 Wind River Concept//EN" "concept-wr.dtd">
<concept-wr domains="(topic concept concept-wr)                            (topic hi-d)                            (topic indexing-d)                            (topic pr-d)                            (topic sw-d)                            (topic ui-d)                            (topic wr-sw-d)                            (topic xml-d)   " id="jow1404333819947" xml:lang="en-us" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/">
    <!-- Modification History
   -->
    <title ixia_locid="1">Deployment Scenarios Using the CLI</title>
    <shortdesc ixia_locid="2">As an alternative to the web administration interface, you can work
        through the scenarios using the command-line interface.</shortdesc>
    <prolog>
        <author ixia_locid="53">Michael B</author>
        <author ixia_locid="4">Tom Towle</author>
        <author ixia_locid="3">Pedro Sanchez</author>
    </prolog>
    <conbody>
        <p ixia_locid="5"> </p>
        <p ixia_locid="54">Users who are comfortable with text-based commands and Linux-based
            operating systems can use a command-line interface (CLI) to install and manage all
            aspects of the HP Helion OpenStack Carrier Grade, including setting up the scenario environment and
            deploying scenarios. In addition to providing a compact and efficient environment, the
            CLI offers some capabilities not afforded by the web administration interface, such as
            the ability to save customization scripts (user data) for re-use.</p>
        <p ixia_locid="55">For general information about the scenarios, see <xref href="jow1410640041471.xml" ixia_locid="82"/>. </p>
        <p ixia_locid="57">To use the CLI, log in to the controller console as the <nameliteral ixia_locid="58">admin</nameliteral> user, or as <nameliteral ixia_locid="59">user1</nameliteral> or <nameliteral ixia_locid="60">user2</nameliteral>, depending
            on the task to be performed.</p>
        <section id="section_N1004E_N10028_N10001" ixia_locid="11">
            <title ixia_locid="12">Working with system objects: UUIDs</title>
            <p ixia_locid="83">Each system component (see in <xref href="jow1411497294920.xml" ixia_locid="92"/>) is
                identified by a string of hexadecimal characters known as a <term ixia_locid="85">universal unique identifier</term> (UUID). In the CLI, UUIDs are sometimes
                required for working with a component. You can display them using an appropriate
                command. For example, you can display the UUIDs of currently defined tenants using
                the following command:</p>
            <p ixia_locid="84"/>
            <p ixia_locid="62"> </p>
            <codeblock ixia_locid="14"><systemoutput ixia_locid="93">~(keystone_admin)$ </systemoutput><userinput ixia_locid="16">keystone tenant-list</userinput>
<systemoutput ixia_locid="94">+----------------------------------+----------+---------+
|                id                |   name   | enabled |
+----------------------------------+----------+---------+
| 38aef5c8244d4505b43f624ce7616d2c |  admin   |   True  |
| 788dbca43c384cc5a4fedf5f90570955 | services |   True  |
+----------------------------------+----------+---------+</systemoutput></codeblock>
            <p ixia_locid="64"> The command line environment provides methods for working with UUIDs
                conveniently and efficiently, without typing them manually.</p>
            <ul id="ul_c32_pmg_1p">
                <li ixia_locid="65">
                    <p ixia_locid="66">You can store them in variables, and use the variables in subsequent
                        commands.</p>
                </li>
                <li ixia_locid="67">
                    <p ixia_locid="68">You can filter the output of commands so that the UUID is passed directly to
                        a variable.</p>
                </li>
            </ul>
            <p ixia_locid="86">For example, the following command stores the UUID of the
                    <nameliteral ixia_locid="19">admin</nameliteral> tenant in the variable <varname ixia_locid="21">admin_tenant_UUID</varname>.</p>
            <codeblock ixia_locid="22"><systemoutput ixia_locid="95">~(keystone_admin)$ </systemoutput><userinput ixia_locid="24">export <varname ixia_locid="25">admin_tenant_UUID</varname>=`keystone tenant-list | grep admin | \
awk '{print $2}'`</userinput></codeblock>
            <p ixia_locid="87">The command <userinput ixia_locid="69">keystone
                    tenant-list</userinput> generates a list of all tenants. This is piped to the
                    <userinput ixia_locid="70">grep</userinput> command, which filters for the line
                containing the string <nameliteral ixia_locid="71">admin</nameliteral>. This in turn
                is piped to an <userinput ixia_locid="72">awk</userinput> command, which prints the
                content of the <uicontrol ixia_locid="81">id</uicontrol> column to the console. The
                result—the UUID—is stored in the variable <varname ixia_locid="73">admin_tenant_UUID</varname>.</p>
            <p ixia_locid="74">You can supply variables to other commands using the shell syntax
                        <userinput ixia_locid="88">${<varname ixia_locid="31">variable</varname>}</userinput>. For
                example, to adjust resource quotas for a tenant, you need to supply the UUID of the
                tenant. With the UUID stored as a variable, you can do this as shown in the
                following example: </p>
            <codeblock ixia_locid="35"><systemoutput ixia_locid="96">~(keystone_admin)$ </systemoutput><userinput ixia_locid="37">neutron quota-update --subnet 32 --tenant-id ${admin_tenant_UUID}</userinput></codeblock>
            <p ixia_locid="75">Note the use of <userinput ixia_locid="76">${admin_tenant_UUID}</userinput> to supply the UUID. (The
                other details of the command are not important for this discussion.) </p>
            <p ixia_locid="77">These techniques are used throughout the CLI-based exercises. If you
                prefer, you can copy UUIDs from the display and paste them directly to the command
                line. </p>
        </section>
        <section id="section_N100E6_N10028_N10001" ixia_locid="40">
            <title ixia_locid="41">User's Login Environment</title>
            <p ixia_locid="42">For the HP Helion OpenStack Carrier Grade to identify the user who is executing system
                commands, a shell environment with the proper set of variables must be in place. For
                the cloud <nameliteral ixia_locid="43">admin</nameliteral> account, the shell is set
                up automatically when you log in as the Linux <nameliteral ixia_locid="89">admin</nameliteral>
                user.</p>
            <p ixia_locid="50">You can create scripts for other users. Later in this presentation,
                the scripts <filepath ixia_locid="51">/etc/nova/openrc.user1</filepath> and
                    <filepath ixia_locid="52">/etc/nova/openrc.user2</filepath> are created (for
                details, see <xref href="jow1404333827217.xml" ixia_locid="78"/>). To execute commands with the
                corresponding user identities, use the <userinput ixia_locid="79">source</userinput> command to
                invoke the scripts.</p>
            <p ixia_locid="90">For more information on login accounts, see the <cite ixia_locid="91">HP Helion OpenStack Carrier Grade Installation
                    Guide: About Login Accounts</cite>.</p>
        </section>
    </conbody>
</concept-wr>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic44623">
    <title>HP Helion <tm tmtype="reg">OpenStack</tm> Carrier Grade 1.1: Sample Templates for HP Helion OpenStack Carrier Grade</title>
    <prolog>
        <metadata>
            <othermeta name="layout" content="default"/>
            <othermeta name="product-version" content="HP Helion Openstack"/>
            <othermeta name="product-version" content="HP Helion Openstack 1.1"/>
            <othermeta name="role" content="All"/>
            <othermeta name="role" content="Paul F"/>
            <othermeta name="product-version1" content="HP Helion Openstack"/>
            <othermeta name="product-version2" content="HP Helion Openstack 1.1"/>
        </metadata>
    </prolog>
    <body>
        <!--UNDER REVISION-->
        <!--permalink: /helion/openstack/carrier/admin/stacks/sample/template/-->
        <p>You can evaluate selected features of Heat using sample templates included with HP Helion
            OpenStack Carrier Grade. The samples also demonstrate some HP Helion OpenStack Carrier
            Grade extensions.</p>
        <!--<hr>
**Note: This feature applies only to servers in the VNF Region.
<hr>-->
        <p>The templates are distributed on DVD and are available online as part of the HP Helion
            OpenStack Carrier Grade release.</p>
        <p><b>HOT Templates: Simple</b></p>
        <p>he templates in the hot/simple directory use the OpenStack HOT Template File Format. Each
            template in this directory provides a simple example for an OpenStack Resource type,
            indicated by the filename.</p>
        <ul>
            <li>
                <b>AWS_CloudFormation_Stack.yaml</b> - Specifies the URL of another Heat template
                that describes additional resources. This allows Heat templates to be nested.</li>
            <li>
                <b>OS_Ceilometer_Alarm.yaml</b> - Creates a Ceilometer threshold alarm. This example
                illustrates how to specify the name of an alarm meter, and how to set parameters
                such as the threshold for triggering an alarm, the comparison operator to use, the
                evaluation period for the comparison, and so on.</li>
            <li>
                <b>OS_Cinder_Volume.yaml</b> - Creates a Cinder volume of a particular size (in
                gigabytes).</li>
            <li>
                <b>OS_Cinder_VolumeAttachment.yaml</b> Creates an attachment, or mount point, for a
                Cinder volume within a VM instance. </li>
            <li>
                <b>OS_Glance_Image.yaml</b> - Creates a Glance image, specifying the image file,
                container format, disk format, and so on.</li>
            <li>
                <b>OS_Heat_AccessPolicy.yaml</b> - Specifies which types of resource to include in
                the results for heat stack-show stackname and heat resource-show stackname
                resourcename.</li>
            <li>
                <b>OS_Heat_CWLiteAlarm.yaml</b> - Creates a threshold alarm using
                OS::Heat::CWLiteAlarm. This is an older and less capable alarm resource than
                OS::Ceilometer::Alarm. If possible, use OS::Ceilometer::Alarm instead.</li>
            <li><b>OS_Heat_InstanceGroup.yaml</b> - Creates a specified number of instances using a
                specified launch configuration. The number of instances is controlled by the size
                property. This invokes AWS::AutoScaling::LaunchConfiguration, which effectively
                restricts the launched instances to AWS::EC2::Instance resources.</li>
            <li>
                <b>OS_Neutron_FloatingIP.yaml</b> - Creates a floating IP address for an external
                tenant network, in order to represent an internal port IP address using NAT.</li>
            <li>
                <b>OS_Neutron_Net.yaml</b> - Creates a tenant network, to which other resources such
                as OS::Neutron::Port, OS::Neutron::Subnet, and OS::Nova::Server can refer.</li>
            <li>
                <b>OS_Neutron_Port.yaml</b> - Creates a port for a VM instance on a tenant network.
                The VM instance can use this to attach to the tenant network.</li>
            <li>
                <b>OS_Neutron_ProviderNet.yaml</b> - Creates a provider network, specifying the name
                and type (flat or vlan).</li>
            <li>
                <b>OS_Neutron_ProviderNetRange.yaml</b> - Creates a segmentation range for a
                provider network, specifying the provider network, and the minimum and maximum
                values of the range.</li>
            <li>
                <b>OS_Neutron_QoSPolicy.yaml</b> - Creates a Neutron QoS policy, which specifies a
                packet scheduling weight. The policy can be referenced by a tenant network to modify
                the scheduling weight of AVS ingress traffic from VMs for the tenant network.</li>
            <li>
                <b>OS_Neutron_Router.yaml</b> - Creates an IP router for tenant networks. The
                router's IP interfaces to tenant network subnets are established as shown in
                OS_Neutron_RouterInterface.yaml.</li>
            <li>
                <b>OS_Neutron_RouterGateway.yaml</b> - Creates a router gateway interface for the
                specified router on the specified external network. The IP address for the interface
                is allocated from the external network subnet, and a default IP route is created
                using the gateway_ip of the subnet.</li>
            <li>
                <b>OS_Neutron_RouterInterface.yaml</b> - Creates an IP interface on an existing
                router for an existing IP subnet.</li>
            <li>
                <b>OS_Neutron_SecurityGroup.yaml</b> - Creates a Security Group that defines a
                stateless IP Filter. This Security Group can be referenced by a Server (VM) resource
                that requires a stateless IP Filter for ingress and egress traffic to or from the
                VM.</li>
            <li>
                <b>OS_Neutron_Subnet.yaml</b> - Creates an IP subnet on a specified tenant network.
                The IP subnet and mask are required, and the DHCP support status (enabled or
                disabled) must be specified . DNS nameservers can optionally be specified. </li>
            <li>
                <b>OS_Nova_Flavor.yaml</b> - Creates a Nova flavor that describes the resource
                requirements for a VM, such as the required RAM, number of vCPUs, disk size, and so
                on.</li>
            <li>
                <b>OS_Nova_KeyPair.yaml</b> - Creates a secure shell (SSH) key pair to enable secure
                login to a launched VM. The created key pair is referenced in OS::Nova::Server.</li>
            <li>
                <b>OS_Nova_Server.yaml</b> - Creates a VM Instance, specifying flavor, image and
                network attachments.</li>
            <li>
                <b>OS_Nova_ServerGroup.yaml</b> - Creates a server group, which is a set of VM
                instances (OS::Nova::Server) that can be assigned group attributes such as
                compute-node-affinity or antiaffinity. To assign a VM instance to a server group,
                use NovaSchedulerHints within the OS::Nova::Server resource; for example,
                NovaSchedulerHints: [{Key: 'group', Value: {Ref: server_group_name}}].</li>
            <li>
                <b>OS_SysInv_HostInterface.yaml</b> - Creates a Layer 2 interface on a compute node,
                specifying the compute node, the interface type (eth or lag), the port or ports, the
                network type (mgmt, oam, infra, or data), and for a data network, the provider
                networks.</li>
        </ul>
        <p><b> HOT Templates: Scenarios</b></p>
        <p>The templates in the hot/scenarios directory use the OpenStack HOT Template File Format.
            Each template in this directory provides an example scenario involving several Resource
            types.</p>
        <ul>
            <li>
                <b>BootFromCinder.yaml</b> - Creates a bootable Cinder volume, and uses it to launch
                a VM instance. The Cinder volume is used as the VM's virtual boot disk.</li>
            <li>
                <b>DPDK_Flavors.yaml</b> - Creates four different flavors for DPDK-type guest
                applications.</li>
            <li>
                <b>Launch2NamedVMs.yaml</b> - Creates a static service containing two virtual
                machines attached to the same network. This template illustrates the HP Helion
                OpenStack Carrier Grade extension for simplified VM instance naming, as described in
                    <xref href="carrier-grade-admin-wr-stacks-wr.dita#topic9186" type="section" />. The template is
                used as an example in Creating a Static Resource.</li>
            <li>
                <b>LabSetup.yaml</b> - Similar to Provisioning.yaml, but also creates IP subnets on
                the tenant networks, routers on the tenant networks, and router gateways.</li>
            <li>
                <b>NetworkSetup.yaml</b> - Creates three tenant networks, five subnets, and two
                routers, each with an external gateway interface and an internal interface.</li>
            <li>
                <b>Provisioning.yaml</b> - Provisions a variety of resources, including provider
                networks, segmentation ranges, tenant networks, key pairs, Glance images, and
                flavors, some of which are implemented as a nested stack (by referencing another
                Heat template).</li>
            <li>
                <b>SimpleServer.yaml</b> - Creates a single VM instance. This template illustrates
                several custom extensions, incuding support for multiple network attachments, the
                use of `name` or `subnet_name` to refer to the network, and the ability to specify
                the vifmodel per network attachment (or NIC).</li>
            <li>
                <b>DemoAutoScaling.yaml</b> - Creates a single Load Balancer VM, and an
                AutoScalingGroup of server VMs that scales based on link utilization. This
                demonstrates a typical in/out autoscaling use case. The template also illustrates
                the use of the RAW UserDataType to pass user data that does not require cf_init for
                parsing.</li>
            <li>
                <b>VMAutoScaling.yaml</b> - Creates an up/down autoscaling service that responds to
                CPU load by adding or removing vCPUs for a VM instance. NestedStack.yaml Creates an
                OS::Cinder::Volume, and an OS::Nova::Server resource that uses the volume. This
                stack is used as a nested stack within the NestedAutoScale.yaml template.
                NestedAutoScale.yaml Creates an autoscaling stack, using a nested stack. The stack
                NestedStack.yaml, which contains a VM and its Cinder Volume, is scaled in and
                out.</li>
        </ul>
        <p><b>CFN Template</b></p>
        <p>The templates in the cfn directory use the AWS Cloud Formation:</p>
        <ul>
            <li>
                <b>AutoScaleWithNamePattern.yaml</b> - Creates an in/out autoscaling service with
                simplified names for VM instances, using a HP Helion OpenStack Carrier Grade
                extension. The service responds to CPU load as reported by a platform-generated
                metric.</li>
            <li>
                <b>ComputeScale.yaml</b> - Creates an in/out autoscaling service that responds to
                CPU load as reported by the compute node hosting the VM.</li>
            <li>
                <b>CPUScale.yaml</b> - Creates an in/out autoscaling service that responds to CPU
                load as reported by the guest VM, using a custom metric generated within the guest.
                For more about this template, see [Resource Scaling
                (Autoscaling)](/helion/openstack/carrier/admin/stacks/autoscale/)</li>
            <li>
                <b>MemScale.yaml</b> - Creates an in/out autoscaling service that responds to memory
                usage as reported by the guest VM, using a custom metric generated within the guest.
                To push the metric to the HP Helion OpenStack Carrier Grade platform, the guest must
                contain cloud-init and heatcfntools.</li>
            <li>
                <b>TenantScale.yaml</b> - Demonstrates the use of a parameter to supply user
                credentials. This template can be run by a tenant user. It creates an in/out
                autoscaling service that responds to CPU load as reported by the guest VM. To push
                the metric to the HP Helion OpenStack Carrier Grade platform, the guest must contain
                cloud-init and heatcfntools.</li>
        </ul>
        <p>
            <xref type="section" href="#topic1840"> Return to Top </xref>
        </p>
    </body>
</topic>

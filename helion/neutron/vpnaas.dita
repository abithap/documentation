<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="HP2.0LBaaS">
  <title>HP Helion <tm tmtype="reg">OpenStack</tm> 2.0 VPNaaS Configuration</title>
  <body>
    <p>HP Helion OpenStack 2.0 VPNaaS Configuration</p>
    <p>This document describes the configuration process and requirements for the HP Helion
      OpenStack 2.0 Virtual Private Network (VPN) as a Service module.</p>
    <p>
      <ul id="LBaaSlist">
        <li><xref href="lbaas.dita#HP2.0LBaaS/Prerequisites">Prerequisites</xref></li>
        <li><xref href="lbaas.dita#HP2.0LBaaS/Considerations">Considerations</xref></li>
        <li><xref href="lbaas.dita#HP2.0LBaaS/Configuration">Configuration</xref></li>
        <li><xref href="lbaas.dita#HP2.0LBaaS/MoreInfo">More Information</xref></li>
      </ul>
    </p>
    
    <section id="Prerequisites">
      <title>Prerequisites</title>
      <ol>
        <li>HP Helion OpenStack must be installed. </li>
        <li>Before setting up VPNaaS, you will need to have created an external network and a
      subnet with access to the internet. Information on how to create the external network
      and subnet can be found in the <xref href="lbaas.dita#HP2.0LBaaS/MoreInfo">
        More Information</xref> section of this document.</li>
    </ol>
    </section>
    
    <section id="Considerations">
      <title>Considerations</title>
      <p>Using the Neutron plugin-based VPNaaS causes additional processes to be run on the 
        Network Service Nodes.  One of these processes, the ipsec pluto process from OpenSwan, 
        runs as root and listens on an external network.  A vulnerability in that process can 
        lead to remote root compromise of the Network Service Nodes.  If this is a concern 
        customers should consider using a VPN solution other than the Neutron plugin-based 
        VPNaaS and/or deploying additional protection mechanisms.</p>
    </section>
    
    <section id="Configuration">
      <title>Configuration</title>
      <p>HP Helion OpenStack 2.0 VPNaaS Configuration</p>
      <sectiondiv>Setup Networks 
        <p>You can setup VPN as a Service (VPNaaS) by first creating networks,
          subnets and routers using the <codeph>neutron</codeph> command line.  
        </p>
        <note>You can execute the included commands from any shell with access to the
        service APIs. In the included examples, the comamands are executed from the
        the deployer, however you could execute the commands from the controller node 
        or any other shell with aforementioned service API access. </note>
        <ol>
           <li>From the deployer, create first private network, subnet and router.
            <codeblock>neutron net-create privateA
neutron subnet-create --name subA privateA 10.1.0.0/24 --gateway 10.1.0.1
neutron router-create router1
neutron router-interface-add router1 subA
neutron router-gateway-set router1 ext-net</codeblock></li>
          <li>Create second private network, subnet and router.
            <codeblock>neutron net-create privateB
neutron subnet-create --name subB privateB 10.2.0.0/24 --gateway 10.2.0.1
neutron router-create router2
neutron router-interface-add router2 subB
neutron router-gateway-set router2 ext-net</codeblock></li>
          <li>Identify the controller nodes that contain the new router namespaces created in the
            pervious steps. The controller nodes will contain the qrouter-* namespaces for router1
            and router2. If the routers are Distributed Virtual Routers (DVR) enabled, the
            controlller nodes will contain the snat-* namespaces. The example below includes three
            controller
            nodes.<codeblock>ssh controller1 'ip netns'
ssh controller2 'ip netns'
ssh controller3 'ip netns'</codeblock>
          <note>Steps 4 and 5 are not required when both namespaces are deployed over the same controller
          node.</note>
          </li>
          <li>Configure bridges and routing tables for the two controller nodes that contain the
            qrouter-* namespaces or snat-* if the routers are DVR enabled. SSH into the controller
            node that contains the first qrouter-* or snat-* namespace.  In the example below, the
            IP address belongs to the subnet ext-net and may be
            different.<codeblock>ssh controller1
 sudo ip addr add 172.16.0.30/24 dev br-vlan103
 sudo ip link set br-vlan103 up</codeblock></li>
          <li>Configure bridges and routing tables for the second controller that contains the
            qrouter-* (NON-DVR) or snat-* (DVR) namespace.
            <codeblock>ssh controller2
sudo ip addr add 172.16.0.31/24 dev br-vlan103
sudo ip link set br-vlan103 up</codeblock></li>
          <li>At this point both router gateways should be able to communicate with each other. From
            first router namespace, test ping. Replace the qrouter-* or snat-* below with
            appropriate name from "ip netns" command. Assuming the gateway addresses for first and
            second routers are 172.16.0.2 and 172.16.0.3 respectively.
            <codeblock>#NON-DVR router
sudo ip netns exec qrouter-62538137-a6a5-40ae-b3a3-e7ae61e5d111 ping 172.16.0.3
            
#DVR router
sudo ip netns exec snat-62538137-a6a5-40ae-b3a3-e7ae61e5d111 ping 172.16.0.3</codeblock></li>
        </ol>
      </sectiondiv>
 
      
      <sectiondiv>Start Virtual Machines
        <ol>
          <li>From the deployer run the following to start the virtual machines.  Begin with adding secgroup rules for SSH and ICMP.
            <codeblock>nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0</codeblock></li>
          <li>Start the virtual machine in the privateA subnet.
          <codeblock>NETA=$(neutron net-list | awk '/privateA/ {print $2}')
nova boot --flavor 1 --image cirros-0.3.3-x86_64 --nic net-id=$NETA vm1 --poll</codeblock></li>
          <li>Start the virtual machine in the privateB subnet.
          <codeblock>NETB=$(neutron net-list | awk '/privateB/ {print $2}')
nova boot --flavor 1 --image cirros-0.3.3-x86_64 --nic net-id=$NETB vm2 --poll</codeblock></li>
        </ol>
      </sectiondiv>


      <sectiondiv>Create VPN
      <ol>
        <li>You can set up the VPN by executing the below commands from the deployer or any shell
            with access to the service APIs. Begin with creating the policies with
              <codeph>vpn-ikepolicy-create</codeph> and <codeph>vpn-ipsecpolicy-create </codeph>.
            <codeblock>neutron vpn-ikepolicy-create ikepolicy
neutron vpn-ipsecpolicy-create ipsecpolicy</codeblock></li>
        <li>Create ipsec endpoint at router1.
        <codeblock>neutron vpn-service-create --name myvpnA --description "My vpn service" router1 subA</codeblock></li>
        <li>Wait a least 5 seconds and then run <codeph>ipsec-site-connection-create</codeph> to
            create a connection.
            <codeblock>neutron ipsec-site-connection-create --name vpnconnection1 --vpnservice-id myvpnA \
--ikepolicy-id ikepolicy --ipsecpolicy-id ipsecpolicy --peer-address 172.16.0.3 \
--peer-id 172.16.0.3 --peer-cidr 10.2.0.0/24 --psk secret</codeblock></li>
        <li>Create the ipsec enpoint at router2.
        <codeblock>neutron vpn-service-create --name myvpnB --description "My vpn serviceB" router2 subB </codeblock></li>
        <li>Wait at least 5 seconds and then run <codeph>ipsec-site-connection-create</codeph> again
            to create the second connection.
            <codeblock>neutron ipsec-site-connection-create --name vpnconnection2 --vpnservice-id myvpnB \
--ikepolicy-id ikepolicy --ipsecpolicy-id ipsecpolicy --peer-address 172.16.0.2 \
--peer-id 172.16.0.2 --peer-cidr 10.1.0.0/24 --psk secret</codeblock></li>
        <li>On the deployer, run the <codeph>ipsec-site-connection-list</codeph> command to see the
            active connections.    Be sure to check that the vpn_services are ACTIVE.  You can check
            this by running <codeph>vpn-service-list</codeph> and then checking ipsec-site-connections status.
            You should expect that the time for both vpn-services and ipsec-site-connections to become ACTIVE could 
            take as long a 30 to 50 seconds.
            <codeblock>neutron ipsec-site-connection-list
+--------------------------------------+----------------+--------------+---------------+------------+-----------+--------+
| id                                   | name           | peer_address | peer_cidrs    | route_mode | auth_mode | status |
+--------------------------------------+----------------+--------------+---------------+------------+-----------+--------+
| 1e8763e3-fc6a-444c-a00e-426a4e5b737c | vpnconnection2 | 172.16.0.2   | "10.1.0.0/24" | static     | psk       | ACTIVE |
| 4a97118e-6d1d-4d8c-b449-b63b41e1eb23 | vpnconnection1 | 172.16.0.3   | "10.2.0.0/24" | static     | psk       | ACTIVE |
+--------------------------------------+----------------+--------------+---------------+------------+-----------+--------+</codeblock></li>
      </ol>
      </sectiondiv>
      
      <sectiondiv>Verify VPN
       <ol>
         <li>Start the packet capture under one of the router namespaces over the qg-* interface. At
            the controller node with the qrouter-* (NON DVR) or snat-* (DVR) namespace run the
            following
            command.<codeblock>sudo ip netns exec qrouter-62538137-a6a5-40ae-b3a3-e7ae61e5d111 tcpdump -i qg-294fd146-ba</codeblock></li>
         <li>From the compute node that hosts the instance, SSH into VM1.  It is recommended that
            you use the qrouter-* namespace instead of the snat-* namespace, the snat-* namespace
            does not always succeed.  Alternatively, if the VM belongs to the private network, you
            could SSH to it from amy node with connectivity to the private network.
            <codeblock>$ ssh cirros@10.1.0.2
password: &lt;password&gt;
      
##Ping the VM2
$ ping 10.2.0.2</codeblock></li>
         <li> You should run <i>tcpdump</i> to verify that the packets traversing from one end point
            to another are encrypted.  If you see that the captured packets in the dump contains
              <b>ESP</b>, the packets are encrypted and your verification is complete.</li>
       </ol> 
      </sectiondiv>
    </section>
    
    <section>
      <title>More Information</title>
      <p>For more information on the neutron command-line interface (CLI) and VPN as a Service
        (VPNaaS), see the OpenStack networking command-line client reference: <xref
          href="http://docs.openstack.org/cli-reference/content/neutronclient_commands.html"
          scope="external" format="html"/></p>
      <p>For information on how to create an external network and subnet, see the OpenStack manual: 
      <xref
        href="http://docs.openstack.org/kilo/install-guide/install/apt/content/neutron_initial-external-network.html"
          scope="external" format="html"/>
      </p>
    </section>
  </body>
</topic>

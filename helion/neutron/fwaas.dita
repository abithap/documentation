<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="HP2.0FWaaS">
  <title>HPE Helion OpenStack 2.0 FWaaS Configuration</title>
  <body>
    <p>HPE Helion OpenStack 2.0 FWaaS Configuration</p>
    <p>This document describes the configuration process and requirements for the HPE Helion
      OpenStack 2.0 Firewall as a Service module.</p>
    <p>
      <ul id="LBaaSlist">
        <li><xref href="fwaas.dita#HP2.0FWaaS/Prerequisites">Prerequisites</xref></li>
        <li><xref href="fwaas.dita#HP2.0FWaaS/Configuration">Configuration</xref></li>
        <li><xref href="fwaas.dita#HP2.0FWaaS/MoreInfo">More Information</xref></li>
      </ul>
    </p>
    
    <section id="Prerequisites">
      <title>Prerequisites</title>
      <p>HPE Helion <tm tmtype="reg">OpenStack</tm> must be installed. </p>
      
    </section>
    <section id="Configuration">
      <title>Configuration</title>
      <p>HPE Helion OpenStack 2.0 FWaaS Configuration</p>
      <p>You can create a set of Firewall rules, add them to a policy and associate it with a
        Firewall by executing the following commands from a shell with access to the API nodes.</p>
      <ol>
        <li>Display the available neutron extensions.<codeblock>neutron ext-list</codeblock></li>
        <li>Display the available networks.<codeblock>neutron net-list</codeblock></li>
        <li>Display the available machines and networks. <codeblock>nova list</codeblock></li>
      </ol>
      
      <p>You can set up networks for FWaaS by creating a network, subnet, router, security group rules, security group filters and floating IP's.</p>
      <ol>
        <li>Create the network, subnet and router.
          <codeblock>neutron net-create net1
neutron subnet-create --name sub1 net1 10.0.0.0/24 --gateway 10.0.0.1
neutron router-create router1
neutron router-interface-add router1 sub1
neutron router-gateway-set router1 ext-net</codeblock></li>
        <li>Create security group rules. Security group rules filters traffic at VM level.
          <codeblock>nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
nova secgroup-add-rule default tcp 80 80 0.0.0.0/0
nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0</codeblock></li>
        <li>Boot a VM.
          <codeblock>NET=$(neutron net-list | awk '/net1/ {print $2}')
nova boot --flavor 1 --image cirros-0.3.3-x86_64 --nic net-id=$NET vm1 --poll</codeblock></li>
        <li>Verify if the instance is ACTIVE and is assigned an IP address.
          <codeblock>nova list</codeblock></li>
        <li>Create a floating IP in the ext-net.
          <codeblock>neutron floatingip-create ext-net
fluuid=$(neutron floatingip-list | awk '/172.16/ {print $2}')
echo "Floating IP UUID = $fluuid"
neutron floatingip-list</codeblock></li>
        <li>Get the fixed IP of the VM instance.
          <codeblock>fixedip=$(nova list | awk '/Running/ {print $12}' | awk -F '=' '{print $2}')
echo "VM fixed IP = $fixedip"</codeblock></li>
        <li>Associate the floating ip with the VM instacne.
          <codeblock>vmportuuid=$(neutron port-list | grep $fixedip | awk '{print $2}')
echo "Port ID for VM port is $vmportuuid"
neutron floatingip-associate $fluuid $vmportuuid
neutron floatingip-list
fip=$(neutron floatingip-list | awk '/172.16/ {print $6}')
echo "Floating IP = $fip"</codeblock></li>
        <li>Verify that you are able to ssh into the instance from the host machine.  To make the external net accessible,
          HOSTIP is the IP of nearest machine.
          <codeblock>ssh ubuntu@$HOSTIP 'sudo ip addr add 172.16.0.1/16 dev virbr4'</codeblock></li>
        <li>Attempt to log into the VM instance.
          <codeblock>ssh ubuntu@$HOSTIP ssh-keygen -R $fip
ssh -t ubuntu@$HOSTIP ssh cirros@$fip</codeblock></li>
        <li>Ping the router gateway.
          <codeblock>ping 10.0.0.1
ping 172.16.0.2</codeblock></li>
      </ol>
      
      <p>Create and attach the firewall.</p>
      <note>By default, an internal "drop all" rule is enabled in IP tables if none of the defines rules match the real-time data packets.</note>
      <ol>
        <li>Create new firewall rules using <codeph>firewall-rule-create</codeph> and providing the
          protocol, action (allow, deny) and name for the new rule. This example allows icmp and ssh
          while denying access to http. See the <codeph>neutron</codeph> command-line reference
          under <xref href="fwaas.dita#HP2.0FWaaS/MoreInfo">more information</xref> on additional 
          options such as source IP, destination IP, source port and destination
          port.<codeblock>neutron firewall-rule-create --protocol icmp --action allow --name allow-icmp
neutron firewall-rule-create --protocol tcp --destination-port 80 --action deny --name deny-http
neutron firewall-rule-create --protocol tcp --destination-port 22 --action allow --name allow-ssh</codeblock></li>
        <li>Once the rules are created, create the firewall policy by using the <codeph>firewall-policy-create</codeph> command with the 
          <codeph>--firewall-rules</codeph> option and rules to include in quotes, followed by the name of the new policy.  The order of the 
          rules is important.
          <codeblock>neutron firewall-policy-create --firewall-rules "allow-icmp deny-http allow-ssh" policy-fw</codeblock></li>
        <li>Finish the firewall creation by using the <codeph>firewall-create</codeph> command, the policy name and the new name you want to
          give to your new firewall.
          <codeblock>neutron firewall-create policy-fw --name user-fw</codeblock></li>
        <li>You can view the details of your new firewall by using the <codeph>firewall-show</codeph> command and the name of your firewall.
          <codeblock>neutron firewall-show user-fw</codeblock></li>
      </ol>
      
      <p>You should verify the FWaaS is functional with the steps included below.</p>
      <ol>
        <li>From an external network, you should be able to successfully ping the floating IP address of the instance.
          <codeblock>ping $fip</codeblock></li>
        <li>Verify from the external network that you are able to connect via ssh to the instance. 
          <codeblock>ssh -t ubuntu@$HOSTIP ssh cirros@$fip</codeblock></li>
        <li>You should expect to see curl fail over port 80.  If curl succeeds, the firewall is not blocking incoming http requests.
          <note>The instance should be listening on port 80 to verify this test.</note><codeblock>curl -vvv $fip</codeblock></li>
      </ol>
      
     </section>
    <section id="MoreInfo">
      <title>More Information</title>
      <p>For more information on the neutron command-line interface (CLI) and firewalls, see the OpenStack networking command-line client
        reference: <xref href="http://docs.openstack.org/cli-reference/content/neutronclient_commands.html" scope="external" format="html"></xref></p>
    </section>
  </body>
</topic>

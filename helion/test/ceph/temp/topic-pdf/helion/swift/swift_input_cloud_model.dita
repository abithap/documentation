<?xml version="1.0" encoding="utf-8"?><?workdir /C:\Users\sharmabi\git\documentation\helion\cinder\ceph\temp\topic-pdf\helion\swift?><?workdir-uri file:/C:/Users/sharmabi/git/documentation/helion/cinder/ceph/temp/topic-pdf/helion/swift/?><?path2project ..\out\topic-pdf\?><?path2project-uri ../out/topic-pdf/?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="modify-input-model" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " class="- topic/topic " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="topic:1;3:32">   <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="title:1;4:10">How to Modify Input Model</title>   <body class="- topic/body " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="body:1;5:9">     <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:1;6:8">This page describes the configuration of Swift services with the various types of input       models supported in this release. </p>     <!--<section><title>Types of Input Model(s)</title><ul><li><b> Entry-scale-with-vsa</b><p>This has a single control plane cluster which runs all services (Nova, Swift, Glance, etc) with an additional 3 resource nodes used as Nova compute servers. </p></li><li><p><b><xref href="#topic_qkg_l4v_bt/mid-size" format="dita">mid size cloud</xref> </b>- (<b>NOTE : This model is not supported in Beta1)</b>This example model describes a system using multiple servers and networks. It provides an example for the configuration of the mid sized cloud. You must use this example model as the basis for building a cloud model for your actual cloud by configuring the server and network that you plan to deploy. To deploy Swift using this model you must make Swift -specific changes to the provided example.</p></li></ul></section>-->     <section id="entry-scale-with-vsa" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="section:1;9:40">       <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="title:2;10:14">Entry-scale-with-vsa</title>       <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:2;11:10">This has a single control plane cluster which runs all services (Nova, Swift, Glance, etc)         with an additional 3 resource nodes used as Nova compute servers. </p>       <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:3;13:10">The <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:1;13:22">entry-scale-with-vsa</codeph> input model is relatively simple and constrained.         Ensure that the disk drives exists and are correctly assigned to Swift nodes. Therefore, no         Swift-specific modification is required for this model before implementing it.</p>       <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:4;16:10"><!--you need not modify this model for any Swift-related changes before implementing it. You are expected to use the mid-size cloud example model as the basis for building a cloud model for your actual cloud â€“ using the servers and networks you plan to deploy.--></p>       <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:5;17:10">Before starting the deployment, you must validate, and possibly update the data in the         cloud model files as follows:<ul class="- topic/ul " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="ul:1;18:42">           <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="li:1;19:15">Examine the <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:2;19:35">data/disks_controller.yml</codeph> file and validate that the             drives exist and have the appropriate preconditions as described in <xref href="allocating_disk_drives.dita#allocating-disk-drives/requirement-disk-device" class="- topic/xref " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="xref:1;22:16" type="p"><?ditaot usertext?>Requirements for a disk device</xref>.</li>           <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="li:2;23:15"> If you plan to add more Swift storage nodes or drives, you should read the             information about partition power in <xref href="ring_specifications.dita#topic_efw_k55_dt" class="- topic/xref " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="xref:2;25:64"><?ditaot usertext?>Specifying the rings (ring               specifications)</xref>. However, in most cases you do not need to change the               <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:3;27:23">config/swift/rings.yml</codeph> file.</li>         </ul></p>     </section>     <section class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="section:2;30:14"><title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="title:3;30:21">Node Type</title><b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="b:1;30:41">Proxy, Container, Account, Object (PACO) Node</b>: The       Swift-proxy, Account, Container and Object services run on the same (PACO) node type in the       control plane. All other control services also run in this node type.       <!--This is used for smaller clouds or where Swift is a minor element in a larger cloud.--></section>     <section class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="section:3;34:14">       <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="title:4;35:14">YML files associated with Swift Services</title>       <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="p:6;36:10">The following <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:4;36:32">yml</codeph> files are configured for <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="b:2;36:73">entry-scale-with-vsa</b>         model:</p>       <simpletable class="- topic/simpletable " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="simpletable:1;38:20">         <strow class="- topic/strow " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="strow:1;39:16">           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:1;40:20"><codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:5;40:28">data/control_plane.yml</codeph></stentry>           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:2;41:20">This<b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="b:3;41:27"> ROLE-CONTROLLER</b> node type runs on the <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="b:4;41:73">c1</b> cluster as specified             in this file.</stentry>         </strow>         <strow class="- topic/strow " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="strow:2;44:16">           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:3;45:20"><codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:6;45:28">data/disk_controller.yml</codeph></stentry>           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:4;46:20">The controller node type allocates two disk drives for use by Swift. </stentry>         </strow>         <strow class="- topic/strow " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="strow:3;48:16">           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:5;49:20"><codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:7;49:28">config/swift/rings.yml</codeph></stentry>           <stentry class="- topic/stentry " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="stentry:6;50:20">Swift account, container, and object storage are managed by Swift using a data             structure known as a <i class="+ topic/ph hi-d/i " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="i:1;51:37">ring</i>. This <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="codeph:8;51:60">yml</codeph> file provides the             specification of the rings. For more information on ring specification, refer to <xref href="ring_specifications.dita#ring-specification" class="- topic/xref " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="xref:3;53:66" type="topic"><?ditaot usertext?>ring             specification</xref>.</stentry>         </strow>       </simpletable>     </section>     <!--<section id="mid-size"><title>Mid Size Cloud Model</title><p>This section describes configuration of Swift services in the mid size cloud model.</p><p>This example model describes a system using multiple servers and networks. It is representative of how a mid sized cloud is configured. You are expected to use the example model as the basis for building a cloud model for your actual cloud â€“ using the servers and networks you plan to deploy. This document describes the Swift-specific changes you need to make to the provided example. </p><p>Before starting the deployment, you must validate, and possibly update the data in the cloud model files as follows:</p><p><ul id="ul_i1s_rbj_2t"><li>You need to assign servers for use by Swift. See <xref href="allocating_server.dita#topic_tq1_xt5_dt"> Allocating Servers for use by Swift</xref></li><li>These servers have disk drives. See <xref href="allocate_disk_drives.dita#topic_twv_b55_dt">Allocating disk drives for use by Swift</xref></li><li>You need to specify the rings for your system. See <xref href="ring_parameters.dita#topic_efw_k55_dt">Specifying the rings (ring specifications)</xref></li></ul></p></section>   -->     <!--<title>Node Types</title><ul id="ul_wfg_ybj_2t"><li><b>Proxy, Container, Account (PAC) Node</b>: This node runs the Swift-proxy, Swift-account, and Swift-container services. The Swift-proxy service processes API requests and directs them to the Swift-account, Swift-container or Swift-object services for processing. The Swift-account and Swift-container handle requests to accounts and containers respectively.</li><li><b>Object (OBJ) Node</b>: This node runs the Swift-object service. The Swift-object service handles requests for objects.</li></ul>-->     <section id="config-swift-services" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="section:4;64:8"><!--<title>Configuration of Swift Services in the </title><p></p><sectiondiv id="node-type"><b>Node Type</b> <p>There are two type of nodes that is associated with Swift services. They are as follows:</p><ul><li><b>Proxy, Container, Account (PAC) Node</b>: This node runs the Swift-proxy, Swift-account, and Swift-container services. The Swift-proxy service processes API requests and directs them to the Swift-account, Swift-container or Swift-object services for processing. The Swift-account and Swift-container handle requests to accounts and containers respectively.</li><li><b>Object (OBJ) Node</b>: This node runs the Swift-object service. The Swift-object service handles requests for objects.</li></ul> </sectiondiv> --></section>     <section class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="section:5;66:14"><!--<b>YML files associated with Swift Services</b> <p>In the example mid sized cloud model, the Swift services are configured using the following <codeph>yml</codeph> files:</p><simpletable id="simpletable_sks_gcj_2t"><strow><stentry><codeph>data/control_plane.yml</codeph></stentry><stentry><p>The Proxy, Container, and Account node types are assigned to a dedicated <i>cluster of nodes</i> as specified in the <b>swpac</b> cluster in <codeph>yml</codeph> file. These nodes are dedicated only to Swift services. </p><p>The Object node type is assigned to a dedicated <i>resource nodes</i> group as specified in the <b>swobj</b> group in <codeph>yml</codeph> file. Requests to Swift are directed to a virtual IP address (VIP) that is managed by a cluster as specified in the <b>core</b> cluster in <codeph>data/control_plane.yml</codeph> file. The requests are then directed on the MGMT network to the Swift-proxy service on one of the Proxy, Container, Account nodes.</p></stentry></strow><strow><stentry><codeph>data/disks_swpac.yml</codeph></stentry><stentry>The Proxy, Container, Account node type uses two disk drives to store account and container databases which is specified in this file. For more information about allocating a disk drives, refer to <xref href="allocate_disk_drives.dita#topic_twv_b55_dt"/></stentry></strow><strow><stentry><codeph>data/disks_swobj.yml</codeph></stentry><stentry>The Object node type uses two disk drives to store account and container databases which is specified in this file. For more information about allocating a disk drives, refer to <xref href="allocate_disk_drives.dita#topic_twv_b55_dt"/>.</stentry></strow><strow><stentry><codeph>config/swift/rings.yml</codeph></stentry><stentry>Swift account, container, and object storage are managed by Swift using a data structure known as a <i>ring</i>. This <codeph>yml</codeph> file provides the specification of the rings. For more information on ring specification, refer to <xref href="ring_parameters.dita#topic_efw_k55_dt">ring specification</xref>.</stentry></strow><strow><stentry><codeph>data/network_groups.yml</codeph></stentry><stentry>This <codeph>yml</codeph> file specifies the MGMT and Swift networks. The Swift-proxy service uses the Swift network to communicate with the other Swift services and among themselves. For more information about allocating a disk drives, refer to</stentry></strow></simpletable>--><sectiondiv class="- topic/sectiondiv " xtrf="C:\Users\sharmabi\git\documentation\helion\swift\swift_input_cloud_model.dita" xtrc="sectiondiv:1;66:2449">         <!--The Swift-proxy service uses two other cloud services. Both of these are configured in the example to run on the <b>core</b> cluster: <ul><li>Swift validates tokens by making requests to the Keystone service</li><li>Swift caches tokens and other data using the memcached service</li></ul>-->       </sectiondiv></section>   </body> </topic>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_fpv_ltr_st">
  <title>Creating a Freezer Scheduler Job</title>
  <body>
    <p><ol>
        <li>Log into any machine (example, Deployer or Controller) and create the job.</li>
        <li>Remember to source the OS variables and use the correct client_id. (The client-id
          correspond to the node where backup files/directory/database resides)
          <codeblock>
# source os_variables fproject fuser  cat > job-backup-mysql.conf
 
 
    {
        "job_actions": [
            {
                "freezer_action": {
                "mode" : "mysql",
                "mysql_conf" : "/etc/mysql/debian.cnf",
                "path_to_backup": "/var/lib/mysql/",
                "snapshot": true,
                "backup_name": "freezer-db-mysql",
                "max_level": 6,
                "max_priority": true,
                "remove_older_than": 90,
                "container": "freezer_backup_devstack_1"
            },
            "max_retries": 5,
            "max_retries_interval": 60,
            "mandatory": true
            }
        ],
        "job_schedule" : {
        },
        "description": "mysql backup"
    }</codeblock></li>
        <li>If we want the backup to be executed every day at 3am, we can specify the following
          scheduling properties:
          <codeblock>"job_schedule" : {
    "schedule_interval": "1 days",
    "schedule_start_date": "2015-06-30T03:00:00"
},</codeblock></li>
        <li>Upload it into the api using the correct client_id:
          <codeblock>
# freezer-scheduler job-create -c client_node_1 --file job-backup-mysql.conf</codeblock></li>
        <li>The status of the jobs can be checked with:
          <codeblock>
# freezer-scheduler -c client_node_1 job-list</codeblock></li>
        <li>If no scheduling information is provided, the job will be executed as soon as possible,
          so its status will go into "running" state, then "completed".</li>
      </ol></p>
    <p>Information about the scheduling and backup-execution can be found in
      /var/log/freezer-scheduler.log and /var/log/freezer.log, respectively.</p>
    <note>Recurring jobs never go into "completed" state, as they go back into "scheduled"
      state.</note>
    <section><title>Restore from a Different Node</title><p>The scheduler can be used to restore
        from a different node using restore_from_host parameter:
        <codeblock>
cat > job-restore-mysql.conf
{
    "job_actions": [
        {
            "freezer_action": {
                "action": "restore",
                "restore_abs_path": "/var/lib/mysql",
                "restore_from_host": "test_machine_1",
                "backup_name": "freezer-db-mysql",
                "container": "freezer_backup_devstack_1"
            },
        "max_retries": 5,
        "max_retries_interval": 60,
        "mandatory": true
        }
    ],
    "description": "mysql test restore"
}
 
 
freezer-scheduler job-create -c client_node_1 --file job-restore-mysql.conf</codeblock></p></section>
    <section><title>Differential Backup and Restore</title><p>The difference is in the use of the
        parameter "always_level": 1 We also specify a different container, so it's easier to spot
        the files created in the swift
        container:<codeblock>swift list freezer_backup_devstack_1_alwayslevel</codeblock></p></section>
    <section><title>Example Backup Job File</title>
      <p><codeblock>
cat > job-backup.conf
 
 {
     "job_actions": [
         {
             "freezer_action": {
             "mode" : "mysql",
             "mysql_conf" : "/etc/mysql/debian.cnf",
             "path_to_backup": "/var/lib/mysql/",
             "backup_name": "freezer-db-mysql",
             "snapshot": true,
             "always_level": 1,
             "max_priority": true,
             "remove_older_than": 90,
             "container": "freezer_backup_devstack_1_alwayslevel"
         },
         "max_retries": 5,
         "max_retries_interval": 60,
         "mandatory": true
         }
     ],
     "job_schedule" : {
     },
     "description": "mysql backup"
 }
 
 
 freezer-scheduler job-create -c client_node_1 --file job-backup.conf</codeblock></p></section>
    <section><title>Example Restore Job File</title><p>The restore job is the same as in "Create a
        restore job and push it into the api":
        <codeblock>
cat > job-restore.conf
{
    "job_actions": [
        {
            "freezer_action": {
                "action": "restore",
                "restore_abs_path": "/var/lib/mysql",
                "restore_from_host": "test_machine_1",
                "backup_name": "freezer-db-mysql",
                "container": "freezer_backup_devstack_1_alwayslevel"
            },
        "max_retries": 5,
        "max_retries_interval": 60,
        "mandatory": true
        }
    ],
    "description": "mysql test restore"
}
 
 
freezer-scheduler job-create -c client_node_1 --file job-restore.conf</codeblock></p></section>
  </body>
</topic>

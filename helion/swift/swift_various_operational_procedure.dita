<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_enj_cms_mt">
  <title>Swift Operational Procedure</title>
  <body>
    <p>This page describes the various operational procedure performed by Swift.</p>
    <section>
      <title>Restart the Swift Deployment  </title>
      <p>The structure of ring is built in an incremental stages. When you modify a ring, the new
        ring uses the state of the old ring as a basis for the new ring. Rings are stored in the
        builder file. The <b>swiftlm-ring-supervisor</b> stores builder files in the<codeph>
          /etc/swiftlm/builder_dir directory/</codeph> on the Ring-Builder node. The builder files
        are named &lt;ring-name> builder. Prior versions of the builder files are stored in the
          <codeph>/etc/swiftlm/builder_dir/backups</codeph> directory.</p>
      <p><?oxy_custom_start type="oxy_content_highlight" color="255,60,255"?>The structure of a ring
        is built in incremental stages. When you modify a ring, the new ring is uses the state of
        the old ring as a basis for the new ring. This state is kept in a file called the builder
        file. The swiftlm-ring-supervisor stores builder files in the /etc/swiftlm/builder_dir
        directory/ on the Ring-Builder node.The builder files are named &lt;ring-name&gt;.builder.
        Prior versions of the builder files are stored in the /etc/swiftlm/builder_dir/backups
        directory.<?oxy_custom_end?></p>
      <p>Normally, you would use an existing builder file as the basis for changes to a ring.
        However, at initial deployment, when you create a ring there will be no builder file.
        Instead, the first step in the process is to build a builder file. The deploy playbooks do
        this for you as part of the deployment process. If you have already successfully deployed
        some of the system, the ring builder files will exist. If you now make changes to the input
        model (for example, adding servers), the process assumes you are <i>modifying</i> a ring and
        will behave differently than when it is creating a ring from scratch. Specifically, the
        rings might not be balanced. If the Cloud Model contains errors or you decide to make
        substantive changes, you may wish to start from scratch and build rings from scratch using
        the procedure described in "Resetting Builder Files".</p>
      <p><?oxy_custom_start type="oxy_content_highlight" color="255,60,255"?> creating a ring from
        scratch, no builder file exists. Instead, the first step in the process is to build a
        builder file. The deploy playbooks do this for you as part of the deployment process. If you
        have already successfully deployed some of the system, the ring builder files will exist. If
        you now make changes to the input model (for example, adding servers), the process assumes
        you are <i>modifying</i> a ring and will behave differently than when it is creating a ring
        from scratch. Specifically, the rings might not be balanced. If the Cloud Model contains
        errors or you decide to make substantive changes, you may wish to start from scratch and
        build rings from scratch using the procedure described in "Resetting Builder Files".</p>
    </section>
    <section>
      <title><?oxy_custom_end?>Resetting Builder Files</title>
      <p>
        <note type="warning">You must reset the builder files during the initial deployment process
          (only). This process should be used only when you want to restart a deploy from the
          scratch. If you reset the builder files after completing your initial deployment then you
          are at a risk of loosing critical system data.<p>To reset the builder files from scratch,
            do the following:<ul id="ul_gxr_4ss_mt">
              <li>You must know your Keystone region name. Each distinct Swift system uses a
                different Keystone region. If you have several Keystone regions and you are trying
                to return to the start state for region2, you do not want to delete the builder
                files of region1 as this is presumably running normally).</li>
              <li>Delete the builder files in the
                  <codeph>/etc/swiftlm/builder-dir/region-&lt;region-name>/</codeph> directory. For
                example, for the region2 Keystone region, use this
                command:<codeblock>sudo rm /etc/swiftlm/builder_dir/region-region2/*.builder</codeblock></li>
            </ul></p></note>
      </p>
      <p><!--WARNING: this process should only be used during the initial deployment process when you want to restart a deploy from scratch. If you use this process after the initial deploy is complete, you risk loosing critical system data--></p>
      <p>Note: If you have successfully deployed a system and accidentally delete the builder files,
        you can recover to the correct state using Recovering Builder Files process.</p>
    </section>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_pgx_vcg_5s">
  <title>Configuring Object Storage (Swift)</title>
  <body>
    <p>This page provides detailed instructions on the configuration of the input model for HP
      Helion OpenStack Object Storage and validating the object storage cloud model. </p>
    <p> Before starting the Swift deployment ensure that HP Helion OpenStack deployer node is
      successfully installed.</p>
    <section id="setting-up-cloud"><b>Setting up the Cloud Model</b></section>
    <section>
      <p>
        <ul id="ul_ic3_hkg_5s">
          <li><xref href="#topic_pgx_vcg_5s/hardware-req" format="dita">Hardware
            Requirement</xref></li>
          <li><xref href="#topic_pgx_vcg_5s/allocate-server-disk" format="dita">Allocate servers and
              disk drives</xref></li>
          <li><xref href="#topic_pgx_vcg_5s/allocate-network" format="dita">Allocate
            networks</xref></li>
          <li><xref href="#topic_pgx_vcg_5s/allocate-ring-builder" format="dita">Allocate a Ring
              -Builder Node</xref></li>
          <li><xref href="#topic_pgx_vcg_5s/ring-specification" format="dita">Ring
              specifications</xref></li>
          <?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>
          <li>Making site-specific changes to configuration parameters<?oxy_custom_end?> (<b>can we
              exclude this for beta???</b>)</li>
        </ul>
      </p>
    </section>
    <section id="hardware-req"><b>Hardware Requirement</b><p>It is recommended to have two <b>disk
          drives on 3 controller nodes</b> to run swift services. <b>How do we add extra drive ? is
          it in baremetal file etc??</b></p></section>
    <section id="allocate-server-disk"><b>Allocate servers and disk drives</b></section>
    <p>The disk model describes the number of disk present on a particular server and its usage.
      Disk are used by the operating system (for example: for the root, log crash filesystem) and
      swift storage.</p>
    <p>A disk model specifies a number of disk drives/devices and then alloctes them for a specific
      purpose. The general syntax is as follows:</p>
    <p>
      <codeblock>device-groups:
 
  - name: group_name
    devices:
      -  name: sdc
      -  name: sdd
      -  name: sde
    consumer:
        name: &lt;subsystem>
        attrs:
            &lt;attributes-sepecific-to-subsystem></codeblock>
    </p>
    <p>The following is a sample for object store. The <b>consumer</b> contains an item called
        <b>name</b>. Here the <b>subsystem (name)</b> is <b>swift</b>. The <b>attrs</b> must contain
      an item called <b>rings</b>. The <b>rings</b> item contains a list of ring names.
      <codeblock>device-groups:
 
  - name: swiftdevices
    devices:
      -  name: sdc
      -  name: sdd
      -  name: sde
    consumer:
        name: swift
        attrs:
            rings:
              -  name: account
              -  name: container
              -  name: object-0</codeblock></p>
    <p>
      <codeblock>  </codeblock>
    </p>
    <p>In the above example, a server using this model has at least three drives:
        <codeph>dev/sdc</codeph>, <codeph>/dev/sdd</codeph>, <codeph>/dev/sde</codeph>. Apart from
      the listed drives there may be other drives present in the server which are allocated to other
      subsystem or used as the boot device. If a device is not present in the disk mode, but exists
      on a server, it will not be used. Conversely, if a device is listed in a disk model and is not
      present in the server, the deployment fails. In this case you must either add the device or
      change the disk model so that the device is not mentioned.</p>
    <p>
      <note> The <b>device-group</b> name is for information and has no effect on the drives usage
        of Object Storage.</note>
    </p>
    <p>The <codeph>sdc</codeph>
      <codeph>sdd</codeph>,and <codeph>sde</codeph> drives are used and dedicated to the Object
      Storage system. And, the devices are used by the account, container, and object-0 rings. Refer
        <xref href="#topic_pgx_vcg_5s/ring-specification" format="dita">ring specification</xref>
      for more information on rings.</p>
    <p>You can modify or edit the disk models to suite your usage of the system. For example, given
      the same set of drives, you can allocate devices to rings in a different topology as
      follows:<codeblock>device-groups:
 
  - name: metadata
    devices:
      -  name: sdc
    consumer:
        name: swift
        attrs:
            rings:
              -  name: account
              -  name: container
 - name: data
 devices:
      -  name: sdd
      -  name: sde
    consumer:
        name: swift
        attrs:
            rings:
              -  name: object-0
              -  name: object-1</codeblock></p>
    <p>In the above example <codeph>/dev/sdc</codeph> is allocated to account and container rings,
      whereas <codeph>/dev/sdd</codeph> and<codeph>dev/sde</codeph> are devoted to object storage
      using two different storage policies (object-0 and object-1).</p>
    <section id="allocate-network"><b>Allocate networks </b><p>Information is required for beta
        0?</p></section>
    <section id="allocate-ring-builder"><b>Allocate a Ring -Builder Node</b><p>Information is
        required for beta 0?</p></section>
    <section id="ring-specification"><b>Ring Specification</b><p>The ring maps the logical names of
        data to locations on a particular disks. There is a separate ring for account database,
        account database, and individual objects, but each rings works similarly. The rings are
        built and managed manually by a utility called the ring-builder. The ring-builder also keeps
        its own builder file with the ring information and additional data required to build future
        rings.</p><p>Using the ring -sepcification key you can specify the ring in the input model.
        Also, there is an entry for each distinct Swift system. Therefore, in the input model
        keystone region name in the specified in the <b>region-name</b>. </p><p>In the example files
          (<b>do we have any such file in build</b>??), a ring-specification is located in
          <codeph>config/swift/rings.yml</codeph> file.The sample of <codeph>rings.yml</codeph> is
        as follows:</p></section>
    <example>
      <codeblock>ring-specifications:
    - region-name: region1
      rings:
        - name: account
          display-name: Account Ring
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3
        - name: container
          display-name: Container Ring
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3
        - name: object-0
          display-name: General
          default: yes
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3</codeblock>
    </example>
    <p>The above example shows that the <b>region1</b> has three rings as follows: </p>
    <p>
      <ul id="ul_owf_4mc_vs">
        <li><b>Account ring</b> - You must always specify a ring called "account". The account ring
          is used by Swift to store metadata about the projects in your system. In Swift, a Keystone
          project maps to a Swift account. The <b>display-name</b> is informational and not
          used.</li>
        <li><b>Container ring</b> -You must always specify a ring called "container". The
            <b>display-name</b> is informational and not used.</li>
        <li><b>Object ring</b> - You must always specify a ring called "object-0". It is possible to
          have multiple object rings, which is known as <i>storage policies</i>. But in this release
          we support only one storage policy, i.e. object-0. The <b>display-name</b> is the name of
          the storage policy and can be used by users of the Swift system when they create
          containers. It allows them to specify the storage policy that the container uses.
              <p><b>Ring Parameters</b></p>You can specify the ring parametes as follows:</li>
        <li><b>name</b> - The <b>name</b> attribute must be "account" and "container" respectively.
          Also, you must have account and container ring. The display-name attribute can be set to
          any value and is not used by the system.</li>
        <li><?oxy_insert_start author="sharmabi" timestamp="20150729T143038+0530" type="surround"?><b><?oxy_insert_end?>partition-power</b>
          - The appropriate value is related to the number of disk drives you allocate for the
          account and container storage. We recommend that you use the same drives for both the
          account and container rings. Therefore, the <b>partition-power</b> value should be the
          same. For more detailed information on partition-power, refer <xref
            href="swift_components.dita#topic_jxs_1xz_1t/part-power">Swift Parameters</xref></li>
        <li><b>Storage policies</b></li>
        <li>display-name</li>
        <li>default</li>
        <li><?oxy_insert_start author="sharmabi" timestamp="20150729T143041+0530" type="surround"?><b><?oxy_insert_end?>replication-policy</b>
          - The <b>replication-policy</b> attribute is used to specify that a ring uses replicated
          storage. The duplicate copies of the object are created and stored on different disk
          drives. All replicas are identical. If one is lost or corrupted, the system automatically
          copies one of the remaining replicas to restore the missing replica.</li>
        <li><?oxy_insert_start author="sharmabi" timestamp="20150729T143044+0530" type="surround"?><b><?oxy_insert_end?>replica-count</b>
          - Defines the number of copies of objects created. The recommended value for the
            <b>replica-count</b> attribute is 3. That is, three copies of data are kept to ensure
          redundancy and continued access in the even of component failures.</li>
        <li><?oxy_insert_start author="sharmabi" timestamp="20150729T143034+0530" type="surround"?><b><?oxy_insert_end?>min-part-time</b>-
          This is the number of hours that the swift-ring-builder tool will enforce between ring
          rebuilds. On a small system, this can be as low as one hour. The value can be different
          for each ring.</li>
        <li>(Optional)<b>Swift-regions</b> - The swift-regions attribute applies to all rings in a
          given Keystone region.</li>
        <li><b>swift-zones</b> - The swift-zones can be applied to all rings in a given region or
          can be specified for a specific ring</li>
      </ul>
    </p>
    <p>Once you have configured the object storage in the input model, you can verify the following
      configuration in <codeph>~/helion/my_cloud/definition/</codeph>on the deployer.</p>
    <p>
      <ul id="ul_wqf_3fy_vs">
        <li>Verify the configured ring-specification.</li>
        <li>Verify that all disk drives allocated to swift have specified a ring and has a
          corresponding ring in the <b>ring-specifications</b>. <note>It is an error to name a ring
            which does not have a specification.</note></li>
        <li>Verify that you have allocated the appropriate servers and their drives to the
          appropriate ring.</li>
      </ul>
    </p>
    <section><b> Object Storage Cloud Model Validation</b><note>Before validating the objsct storage
        cloud model, run the configuration processor against your cloud model.</note><p>To validate
        object storage cloud model, execute the following command on the deployer
        :<codeblock>ansible-playbook -i hosts/verb_hosts swift-ring-validate.yml</codeblock></p><p>If
        any error occurs while executing the validation command, you can get the detailed
        information as follows:<ul id="ul_x1j_s3y_vs">
          <li>Logon to the node that has been designated as the Ring-Builder (<b>see "Allocate a
              Ring-Builder Node" above</b>). <note>You should run the swift-ring-validate playbook
              as mentioned above otherwise the files required to run the swiftlm-ring-supervisor
              will not be in place on the node.</note></li>
          <li>Execute the following
            command:<codeblock>sudo swiftlm-ring-supervisor --make-delta --report</codeblock></li>
        </ul></p><p> The command reports an error or problem with the input model. It also prints a
        summanry of the ring create actions that are planned for the deploy phase of the
        process.</p></section>
    <section><b>Examine the ring-delta file</b><p><b>Important:</b>You should run the
        swift-ring-validate playbook as mentioned above otherwise the files required to run the
        swiftlm-ring-supervisor will not be in place on the node.</p></section>
    <ul id="ul_o5x_sry_vs">
      <li>Logon to the node that has been designated as the Ring-Builder (<b>see "Allocate a
          Ring-Builder Node" above</b>).</li>
      <li>Execute the following command to list all drives and the actions planned for the
        rings:<codeblock>sudo swiftlm-ring-supervisor --make-delta --report --detail detail</codeblock></li>
    </ul>
    <p>Validate the following information in the output:<ul id="ul_mvh_fwy_vs">
        <li>Drives are being added to all rings in the ring specifications.</li>
        <li>Servers are being used as expected (for example, you may have a different set of servers
          for the account/container rings than the object rings.</li>
        <li>The weight value is as expected. The weight value is the drive size expressed in GB
          (i.e., a 1 TB drive has a weight of 1024).</li>
      </ul></p>
  </body>
</topic>

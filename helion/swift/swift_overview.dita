<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="object-storage">
  <title>HP Helion OpenStack Object Storage (Swift)</title>
  <body>
    <p> Based on <tm tmtype="reg">OpenStack</tm> Object Storage, the HP Helion OpenStack Object
      Storage service provides a highly available, resilient, and scalable storage pool for
      unstructured data. It is highly durable architecture with no single point of failure.</p>
    <p>In addition, HP Helion OpenStack introduces the concept of cloud input models. In this
      release (<b>beta1</b>) we are supporting <b><xref
          href="swift_input_cloud_model.dita#topic_qkg_l4v_bt/configuration-of-swift-vsa-model"
          >entry-scale-with-vsa</xref></b> of cloud model.</p>
    <p>Object Storage (Swift) is Software Defined Storage (SDS) architecture layered on top of
      industry-standard servers using native storage devices. Swift presents an object paradigm
      using an underlying set of disk drives. The disk drives are managed by a data structure called
      a "ring". Swift also enable you to store, retrieve, and delete objects in a containers through
      RESTful API.</p>
    <p>A Swift system comprises a number of services: <ul id="ul_sfz_gft_dt">
        <li>Swift-Proxy provides the API for all requests to the Swift system.</li>
        <li>Account and Container services provide storage management of the accounts and
          containers.</li>
        <li>Object services provide storage management for object storage.</li>
      </ul></p>
    <p>These services can be co-located in a number of ways. In the example cloud models distributed
      in HP Helion OpenStack速, the following two general patterns exist:<ul id="ul_myw_kft_dt">
        <li>The Swift-proxy, Account, Container, and Object services run on the same (PACO) node
          type in the control plane. This is used for smaller clouds or where Swift is a minor
          element in a larger cloud.</li>
        <li>The Swift-Proxy, Account, and Container services run on one (PAC) node type in a control
          plane and the Object services run on another (OBJ) node type in a resource pool. This is
          used for in larger clouds or where a larger Swift system is in use or planned.</li>
      </ul></p>
    <p>Each of these node types can be scaled independently to meet workload and redundancy
      requirements. The storage service can be scaled up as necessary. It can also scaled
      horizontally to handle an increased number of simultaneous connections and a larger number of
      objects.</p>
    <p>Based on OpenStack速 Object Storage, the HP Helion OpenStack速 Object Storage service provides
      a highly available, resilient, and scalable storage pool for unstructured data. It is highly
      durable architecture with no single point of failure.</p>
    <p>HP Helion OpenStack速 Object Storage introduces a concept of cloud input models. In this
      release (<b>beta1</b>) we are supporting entry-scale-with-vsa of cloud model. To know more
      about configuration of the <codeph>entry-scale-with-vsa</codeph> cloud model, refer to How to
      Modify Input Model.</p>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="notifications">
  <title>HP Helion OpenStack &#174; 2.0: Notification White-listing and Polling Strategies</title>
  <body>
   
   <section> In HP Helion 2.0 we have adopted a strategy to reduce the amount of data that is sent
      to storage. The main reason is that we are currently using a SQL-based cluster, which is not
      highly indicated for big data. <p>You can control the data Ceilometer collects using the
        pipeline configuration files. These configuration files are located in the /etc folder of
        the respective components on all of the controller nodes. Ceilometer Central Agent and
        Ceilometer Notification agent use different <b>pipeline.yml </b>files to configure meters
        that are fetched via polling and using notifications. This was done to prevent accidently
        polling for meters that can be retrieved by both the polling agent and the notification
        agent. (e.g Glance image and Glance image.size are meters that are of both pollster and
        notification type)</p> For example: For notification white listing, we have to specify
      pipeline configuration for Ceilometer Notification Agent. The pipeline configuration is called
        <b>pipeline-agent-notification.yml</b> and located under
        <b>/opt/stack/service/ceilometer-agent-notification/etc/</b>. For Polling white listing, we
      have to specify pipeline configuration for Ceilometer Agent Central. The pipeline
      configuration is called <b>pipeline-agent-central.yml</b> and located under<b>
        /opt/stack/service/ceilometer-agent-central/etc</b>. The pipeline configuration file needs
      to be changed in all the controller nodes to change the white-listing and or polling strategy.
      We recommend that you run <b>ceilometer-reconfigure.yml</b> to make those changes. <p>As there
        are references to the version of the components installed in the respective environment and
        those needs to be verified appropriately. </p>The pipeline configuration file is comprised
      of two major elements: Sources and Sinks. The Sources represents the data that is harvested
      either from notifications posted by services or collected through polling. Sinks represent how
      the data is modified before it is published to the internal queue for collection and storage.
        <p>In the Sources section there is a list of meters. These meters are the data that is going
        to be collected. For a full list please refer to the Ceilometer documentation available at:
        http://docs.openstack.org/admin-guide-cloud/telemetry-measurements.html </p>Here it is an
      example of the default pipeline configuration for Agent Central: Default
      pipeline-agent-central.yml
      <codeblock>---
sources:
    - name: swift_source
      interval: 3600
      meters:
          - "storage.objects"
          - "storage.objects.size"
          - "storage.objects.containers"
      resources:
      discovery:
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</codeblock>
      Here it is an example of the default pipeline configuration for Agent Notification is
      following:
      <codeblock>
---
sources:
    - name: meter_source
      interval: 30
      meters:
          - "instance"
          - "ip.floating"
          - "network"
          - "network.create"
          - "network.update"
      sinks:
          - meter_sink
    - name: image_source
      interval: 30
      meters:
          - "image"
          - "image.size"
          - "image.upload"
          - "image.delete"
      sinks:
          - meter_sink
    - name: volume_source
      interval: 30
      meters:
          - "volume"
          - "volume.size"
          - "snapshot"
          - "snapshot.size"
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</codeblock>
      The interval attribute decides the frequency of the data polling whenever the meter can be
      polled. In general the meters that are available as notification and polling (indicated as
      both in http://docs.openstack.org/admin-guide-cloud/telemetry-measurements.html) are going to
      be polled at the specified interval. The combination of meters and polling interval is the
      most performing compromise that we found using the SQL cluster back-end. In our setting, since
      we limited the polling meters to swift only, the interval is set to 3600 that corresponds to 1
      hour expressed in seconds. In our setting, since we want to rely on notifications rather than
      polling. Hence we have limited the meters (swift only) to be polled. </section>
   
    <section id="list"><title>Editing the List of Meters</title> The list of meters can be easily
      reduced or increased editing the pipeline configuration of the respective components (which
      are notification or central/polling agent) and subsequently restarting the Notification
      agent(Helion Ceilometer Runbook#CeilometerNotificationPublishingAgent) or central-agent
      (please see: Helion Ceilometer Runbook - Ceilometer Central Agent) based on the change made,
      if pollsters are modified then central agent requires restart and if notifications added then
      Notification agent requires restart. Also, collector needs to be restart (Helion Ceilometer
      Runbook#CeilometerCollector) Here it is an example of compute only <b>pipeline.yml </b>with
      the daily poll interval:
      <codeblock>---
sources:
    - name: meter_source
      interval: 86400
      meters:
          - "instance"
          - "memory"
          - "vcpus"
          - "compute.instance.create.end"
          - "compute.instance.delete.end"
          - "compute.instance.update"
          - "compute.instance.exists"
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
          - notifier://</codeblock>
    </section>
   
   
   
  </body>
</topic>

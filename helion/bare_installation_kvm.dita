<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="install_kvm">
  <title>HPE Helion <tm tmtype="reg">OpenStack</tm> 2.0: Installation for KVM Hypervisor on
    Baremetal</title>
  <body>
    <section id="important-notes"><title>Important Notes</title>
      <ul>
        <li>If you are looking for information about when to use the GUI installer and when to use
          the CLI, see the <xref href="installation_overview.dita#install_overview">Installation
            Overview</xref>.</li>
        <li>We have put together a <xref href="preinstall_checklist.dita">Pre-Installation
            Checklist</xref> that should help with the recommended pre-installation tasks.</li>
        <li>Ensure the <xref href="hardware.dita">minimum hardware requirements</xref> are met in
          your environment.</li>
        <li>There is no longer a requirement to use a dedicated deployer node. See the note in the
            <xref href="releasenotes.dita">Release Notes</xref> as well as the configuration section
          in the install steps below for details.</li>
        <li>There is no requirement to have a dedicated network for OS-install and system
          deployment. More information can be found on the <xref href="supportedconfigs.dita"
            >Supported Configuration</xref> page.</li>
        <li>If you run into issues during installation, we have put together a list of <xref
            href="installation_troubleshooting.dita">Troubleshooting Steps</xref> you can
          reference.</li>
        <li>Read over the page about the <xref href="input_model.dita">Helion OpenStack 2.0 Input
            Model</xref> to learn about the configuration options for your cloud.</li>
        <li>Make sure <xref href="administration/wipe_disks.dita">all disks on the system(s) are
            wiped</xref> before you begin the install. (For Swift, refer to <xref
            href="swift/allocating_disk_drives.dita#allocating-disk-drives/requirement-disk-device"
            >Swift Requirements for Device Group Drives</xref>)</li>
        <li>The <codeph>/dev/sda</codeph> disk on your systems will be used for the operating
          system.</li>
        <li>Both HPE Linux for HPE Helion OpenStack and HPE Helion OpenStack are part of the ISO you
          will download from the <xref
            href="https://helion.hpwsportal.com/catalog.html#/Category/%7B%22categoryId%22%3A10311%7D/Show"
            format="html" scope="external">Helion Downloads</xref> page. There is only one download;
          it includes both the operating system and the Helion OpenStack installer in one ISO.</li>
        <li>All machines of a given role should be the same configuration.</li>
        <li>The machine hosting the deployer and all baremetal systems must be connected to a
          management network. Nodes on this management network must be able to reach the iLO
          subsystem of each baremetal system to enable host reboots as part of the install process.
          The HPE Helion OpenStack architecture requires that the IPMI network is a separate network
          and that a route exists from the management network to the IPMI network for iLO
          access.</li>
      </ul>
    </section>
    <section id="Prereqs">
      <title>Before You Start</title>
      <note type="important">We have put together a <xref href="preinstall_checklist.dita"
          >Pre-Installation Checklist</xref> that should help with the recommended pre-installation
        tasks.</note>
      <p>Prepare your baremetal hardware, as follows, on all nodes:</p>
      <ul>
        <li>Set up the iLO Advanced license in the iLO configuration. Make sure the iLO user has
          admin privileges.</li>
        <li> HPE Helion OpenStack 2.0 Beta 2 will detect and use the "BIOS" mode you have selected
          for each node; UEFI or legacy BIOS. UEFI support is new in Beta 2.</li>
        <li>Ensure that the network interface to be used for PXE installation has PXE enabled.</li>
        <li>Ensure that the other network interfaces have PXE disabled.</li>
        <li>Ensure that any logical drives (LUN) for the servers you will be using are created to
          meet the disk requirements outlined in the <xref href="hardware.dita">Minimum Hardware
            Requirements</xref>.</li>
      </ul>
    </section>
    <section id="DeployerInstall">
      <title>Set up the Deployer</title>
      <p>You can use a dedicated deployer node or you can run these instructions on your first
        controller node. There is only one difference in the steps and that is notated in the <xref
          href="#install_kvm/Configuration">Configure Your Environment</xref> section.</p>
      <ol>
        <li>Download the HPE Helion OpenStack Deployer ISO from the <xref
            href="https://helion.hpwsportal.com/catalog.html#/Category/%7B%22categoryId%22%3A10311%7D/Show"
            format="html" scope="external">Helion Downloads</xref> page after signing up and being
          approved for the program.</li>
        <li>Boot your deployer from the ISO. Insert the CD ROM in the Virtual Media drive on the
          iLO.</li>
        <li>Enter "install" to start installation. <note>"install" is all lower case</note></li>
        <li>Select the language. Note that only the English language selection is currently
          supported.</li>
        <li>Select the location.</li>
        <li>Select the keyboard layout.</li>
        <li>Select the primary network interface, if prompted:<ul>
            <li>Assign IP address, netmask</li>
          </ul></li>
        <li>Create new account:<ul>
            <li>Enter a username.</li>
            <li>Enter a password.</li>
            <li>Enter time zone if prompted to do so.</li>
          </ul>
        </li>
        <li>Ensure your deployer has a valid DNS nameserver in the <codeph>/etc/resolv.conf</codeph>
          file</li>
      </ol>
      <p>At the end of this section you should have a node set up with hLinux on it.</p>
    </section>
    <section id="protection"><title>Protecting Sensitive Data on the Deployer</title>
      <p>There are a number of mechanisms that can be used to protect sensitive data such as
        passwords, some Ansible inputs, and the SSH key used by Ansible on the deployer. See the
        installation section below for details. Please remember the need to guard against exposure
        of your environment variables, which may happen through observation over the shoulder.</p>
      <p>There are instructions included in the sections below that show how to encrypt your data
        using the <codeph>hosencrypt.py</codeph> script. You may want to change the encryption keys
        used to protect your sensitive data in the future and this shows you how:</p>
      <ul>
        <li><b>SSH keys</b> - Run the command below to change the passphrase used to protect the
          key: <codeblock>ssh-keygen -f id_rsa -p</codeblock></li>
        <li><b>Configuration Processor Key</b> - If you wish to change an encryption password that
          you have already used when running the Configuration Processor then enter the existing
          password at the first prompt and the new password at the second prompt when running the
          Configuration Processor playbook. See <xref href="#install_kvm/encrypt">Encrypting
            Password during Configuration Processor</xref> for more details.</li>
        <li><b>iLO passwords, VSA password if encrypted with <codeph>hosencrypt.py</codeph></b> -
          Rerun the utility specifying a new encryption key when prompted. You will need to enter
          the plaintext passwords at the password prompt.</li>
      </ul>
    </section>
    <section id="HLM_Node_Personalization">
      <title>Configure and Run the Deployer</title>
      <note>It's critical that you don't run as root. Run as the user you just created (or stack if
        you left the default of "stack"), but do not run as root.</note>
      <ol>
        <li>Log in to the node you setup in the previous steps as the user you created during the
          setup phase, and mount the install media at <codeph>/media/cdrom</codeph>.  Here is the command to achieve this:
          <codeblock>sudo mount Helion-OpenStack-2.0.0-b.2-Beta2.iso /media/cdrom</codeblock></li>
        <li>Unpack the tarball that is in the <codeph>/media/cdrom/hos2.0.0/</codeph> directory:
          <codeblock>tar zxvf /media/cdrom/hos-2.0.0/hos-2.0.0-b.2-20150920T130131Z.tgz</codeblock></li>
        <li>Run the following included script:
          <codeblock>~/hos-2.0.0-b.2/hos-init.bash</codeblock></li>
        <li><p>You will be prompted to enter a SSH passphrase when running
              <codeph>hos-init.bash</codeph>. This passphrase is used to protect the key used by
            Ansible when connecting to its client nodes.</p>
          <p>For CI purposes it is possible to disable SSH passphrase prompting by setting the
              <codeph>HOS_INIT_AUTO</codeph> environment variable before running
              <codeph>hos-init.bash</codeph>, like this:</p>
          <codeblock>export HOST_INIT_AUTO=y"</codeblock></li>
      </ol>
      <p>If you have protected the SSH key with a passphrase then execute the following commands to
        avoid having to enter the passphrase on every attempt by Ansible to connect to its client
        nodes: <codeblock>eval $(ssh-agent)
ssh-add ~/.ssh/id_rsa</codeblock></p>
      <p>At the end of this section you should have a local directory structure, as described
        below:</p>
      <codeblock>
helion/                        Top level directory
helion/examples/               Directory contains the config input files of the example clouds
helion/my_cloud/definition/    Directory contains the config input files
helion/my_cloud/config/        Directory contains .j2 files which are symlinks to the /hos/ansible directory
helion/hos/                    Directory contains files used by the installer
</codeblock>
    </section>
    <section id="Configuration">
      <title>Configure Your Environment</title>
      <ol>
        <li>Setup your configuration files, as follows: <ol>
            <li>See the sample set of configuration files in the
                <codeph>~/helion/examples/entry-scale-with-vsa</codeph> directory. The accompanying
              README.md file explains the contents of each of the configuration files.</li>
            <li>Copy the example configuration files into the required setup directory and edit them
              to contain the details of your environment:
              <codeblock>cp -r ~/helion/examples/entry-scale-with-vsa/* ~/helion/my_cloud/definition/</codeblock></li>
            <li>Begin inputting your environment information into the configuration files in the
                <codeph>~/helion/my_cloud/definition</codeph> directory. Full details of how to do
              this can be found here: <xref href="input_model.dita">Helion OpenStack 2.0 Input
                Model</xref>. <note type="important">If you chose to use your first controller node
                as your deployer, ensure that your <codeph>baremetalConfig.yml</codeph> file
                contains the <codeph>is_deployer: true</codeph> notation in your controller options.
                If you are using a dedicated deployer node you can omit this. Here is an example
                snippet of a <codeph>baremetalConfig.yml</codeph> file where a user is using their
                first controller node as their deployer:
                <codeblock>
node_name: "ccn-0001"
role: "ROLE-CONTROLLER"
pxe_mac_addr: "b2:72:8d:ac:7c:6f"
pxe_interface: "eth2"
pxe_ip_addr: "192.168.10.3"
ilo_ip: "192.168.9.3"
ilo_user: "admin"
ilo_password: "password"
<b>is_deployer: true</b></codeblock></note></li>
            <li id="encrypt">You can use the <codeph>hosencrypt.py</codeph> script to encrypt your
              iLo passwords. This script uses OpenSSL. <ol>
                <li>Change to the Ansible directory:
                  <codeblock>cd ~/helion/hos/ansible</codeblock></li>
                <li>Put the encrytion key into the following environment variable:
                  <codeblock>export HOS_USER_PASSWORD_ENCRYPT_KEY=&#60;encryption key></codeblock></li>
                <li>Run the python script below and follow the instructions. Enter a password that
                  you want to encrypt. <codeblock>hosencrypt.py</codeblock></li>
                <li>Take the string generated and place it in the <codeph>"ilo_password"</codeph>
                  field in your <codeph>~/helion/my_cloud/definition/data/servers.yml</codeph> file,
                  remembering to enclose it in quotes.</li>
                <li>Repeat the above for each server.</li>
              </ol>
              <note>Before you run any playbooks, remember that you need to export the encryption
                key in the following environment variable: <codeph>export
                  HOS_USER_PASSWORD_ENCRYPT_KEY=&#60;encryption key></codeph></note></li>
          </ol></li>
        <li>Commit your configuration to the <xref href="using_git.dita">local git repo</xref>, as
          follows: <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"
</codeblock>
          <note>This step needs to be repeated any time you make changes to your configuration files
            before you move onto the following steps. See <xref href="using_git.dita">Using Git for
              Configuration Management</xref> for more information.</note></li>
      </ol>
      <p>Then you need to run the following commands to complete your configuration. These commands
        also verify your configuration is correct.</p>
      <ol>
        <li>Run the following playbook which confirms that there is iLo connectivity for each of
          your nodes so that they are accessible to be re-imaged in a later step:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost bm-power-status.yml</codeblock></li>
        <li>Run the configuration processor, as follows:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
      </ol>
      <p>When you run the Configuration Processor you will be prompted for two passwords. Enter the
        first password to make the Configuration Processor encrypt its sensitive data, which is
        comprised of the random inter-service passwords that it generates and the Ansible group_vars
        and host_vars that it produces for subsequent deploy runs. You will need this key for
        subsequent Ansible deploy runs and subsequent Configuration Processor runs. If you wish to
        change an encryption password that you have already used when running the Configuration
        Processor then enter the new password at the second prompt, otherwise just press carriage
        return.</p>
      <p>For CI purposes you can specify the required passwords on the ansible command line. For
        example, the command below will disable encryption by the configuration processor
        <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock>
      </p>
      <p>If you receive an error during either of these steps then there is an issue with one or
        more of your configuration files. We recommend that you verify that all of the information
        in each of your configuration files is correct for your environment and then commit those
        changes to git using the instructions above.</p>
      <p>Before re-running the Configuration Processor after fixing an error you need to run the
        clean script detailed in the <xref
          href="installation_troubleshooting.dita#troubleshooting_installation/configproc"
          >Installation Troubleshooting</xref> document.</p>
    </section>
    <section id="CobblerDeploy">
      <title>Deploy Cobbler </title>
      <ol>
        <li>Run the following command:
          <codeblock>export ANSIBLE_HOST_KEY_CHECKING=False</codeblock></li>
        <li>Run the following playbook to deploy Cobbler:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost cobbler-deploy.yml</codeblock></li>
        <li>The cobbler-deploy stage of the installation now prompts for a password. The entered
          value is used to set a user-defined password for subsequent node installs so that a user
          can gain console/terminal access to the nodes. For example, if a node maintenance is
          required or if the SSH keys are lost. The value is encrypted and placed in the kickstart
          for the node installs.<p>The password prompts look like this:</p>
          <codeblock>Enter the password that will be used to access provisioned nodes:
confirm Enter the password that will be used to access provisioned nodes:</codeblock>
          <p>Alternatively, you can also specify this password in the ansible playbook command like
            this:</p>
          <codeblock>ansible-playbook -i hosts/localhost cobbler-deploy.yml -e hlmuser_password="&lt;password>"</codeblock></li>
      </ol>
    </section>
    <section id="NodeProvision"><title>Provision the Nodes</title>
      <ol>
        <li>Run the following command, which will reimage all the nodes using PXE:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost bm-reimage.yml</codeblock></li>
        <li>The script will wait for the nodes to install and come back up.</li>
      </ol>
    </section>
    <!--
    <section id="validate_swift"><title>Validate Object Storage (Optional)</title>
      <ol>
        <li><p>To validate object storage cloud model, execute the following command on the
            deployer:</p>
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts _swift-validate-input-model.yml</codeblock>
          <p>If any error is raised when you validate the object storage, refer to <xref
              href="swift/troubleshooting.dita">Swift-Troubleshooting</xref></p></li>
      </ol>
    </section>
    -->
    <section id="deploy"><title>Deploy the Cloud</title>
      <ol>
        <li>Use the playbook below to create a deployment directory:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
        <li>Run the <codeph>site.yml</codeph> playbook using the following command. The <codeph>-e
            elasticsearch_cluster_name</codeph> switch is used to set a unique name for your
          elasticsearch cluster. This should be set to a value other than
            <codeph>elasticsearch</codeph>. <codeblock>cd ~/scratch/ansible/next/hos/ansible 
ansible-playbook -i hosts/verb_hosts site.yml -e elasticsearch_cluster_name=&#60;name></codeblock>
          <p>If you have used an encryption password when running the Configuration processor use
            the command below and enter the encryption password when prompted:
            <codeblock>ansible-playbook -i hosts/verb_hosts site.yml --ask-vault-pass</codeblock>
          </p>
          <note> The step above runs osconfig to configure the cloud and hlm-deploy, to deploy the
            cloud. Therefore, this step may run for quite some time while all the nodes are
            configured (perhaps 45 minutes or more, depending on the number of nodes, to a degree).
          </note>
        </li>
        <li>Verify that the network is working correctly. Ping each IP (excluding VSA-BLK and VIPs)
          from the /etc/hosts file from one of the controller nodes.</li>
      </ol>
    </section>
    <section id="cinder"><title>Install and Configure a Block Storage Backend (Optional)</title>
      <p>There are options for the Block Storage backend notated below. Without a valid backend your
        Block Storage (Cinder) implementation will not be usable. These documents will assist you in
        installing and configuring a backend solution.</p>
      <p><b>Ceph</b></p>
      <ul>
        <li><xref href="test/ceph/ceph_overview.dita">Ceph Overview</xref></li>
        <li><xref href="test/ceph/ceph_deploy.dita">Ceph Installation and
          Configuration</xref></li>
      </ul>
      <p><b>VSA</b></p>
      <ul>
        <li><xref href="test/vsa/vsa.dita">VSA Installation and Configuration</xref></li>
      </ul>
      <p><b>3PAR</b></p>
      <ul>
        <li><xref href="test/3Par/3par_configuration.dita">3PAR Installation and
            Configuration</xref></li>
      </ul>
    </section>
    <section id="post-installation"><title>Post-Installation Verification and Administration</title>
      <p>We recommend the following post-installation steps:</p>
      <ul>
        <li><xref href="installation_verification.dita">Verify the installation using Tempest's
            embedded tests.</xref></li>
        <li>Go through the <xref href="postinstall_checklist.dita">Post-Installation
            Checklist</xref> for common administrative tasks.</li>
      </ul>
    </section>
  </body>
</topic>

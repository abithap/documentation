<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="topic12031">
  <title>HP Helion <tm tmtype="reg">OpenStack</tm> 2.0: Monitoring Guide</title>
  <body>
    <section id="about">
      <p>The HP Helion OpenStack Monitoring service leverages Monasca, which is a multi-tenant,
        scalable, fault-tolerant monitoring service. The name "Monasca" is short for "monitoring at
        scale".</p>
      <p>For details on OpenStack Monasca, see <xref href="https://wiki.openstack.org/wiki/Monasca"
          format="html" scope="external">https://wiki.openstack.org/wiki/Monasca</xref></p>
    </section>
    <section id="differences"><title>Differences Between Upstream and Helion OpenStack
        Implementations</title>
      <p>In the Helion OpenStack 2.0 release, the OpenStack monitoring standard, Monasca, is
        supported as the Helion OpenStack monitoring solution with the following exceptions (which
        are not implemented):</p>
      <ul>
        <li>Transform Engine</li>
        <li>Events Engine </li>
        <li>Anomaly and Prediction Engine</li>
      </ul>
      <note>Icinga, which was the supported monitor service in previous releases of Helion
        OpenStack, is not supported in Helion OpenStack 2.0.</note>
    </section>
    <section id="working"><title>Working with Monasca</title>
      <p>The primary ways of interacting with this service are:</p>
      <ul>
        <li>Web UI - <xref href="#topic12031/opsconsole">Ops Console</xref></li>
        <li>Command Line - <xref href="#topic12031/cli">python-monascaclient</xref></li>
        <li><xref
            href="https://github.com/stackforge/monasca-api/blob/master/docs/monasca-api-spec.md"
            format="html" scope="external">REST API</xref></li>
      </ul>
    </section>
    <section id="diagram">
      <title>Diagram of Monasca Service</title>
      <p><image placement="break" href="../images/monasca_diagram.png"/></p>
    </section>
    <section id="opsconsole"><title>Ops Console</title>
      <p>The Ops Console (Operations Console) is designed for Helion OpenStack Administrators to
        have a web-based UI that they can use to view data about their Helion OpenStack
        infrastructure. The Ops Console offers the user access to data such as the alarms data by
        service, performance data, compute nodes and instances lists, and a drilldown to Kibana for
        a deep look into logs. The Business Logic Layer is a middleware component that serves as a
        single point of contact for the UI to communicate with OpenStack services such as Monasca,
        Nova, and others.</p>
    </section>
    <section id="cli"><title>Monasca CLI</title>
      <p>The python-monascaclient can be installed via pip on any machine and used by providing it
        with the keystone user/password and url (v3). It is already installed on any machine with
        the Monasca Agent and can be found at `/opt/monasca/bin/monasca`. I suggest setting the
        necessary credentials as environment variables and as an aid to development we have provided
        a simple Ansible playbook which will write out the file `~/monasca-env.sh`. After running
        this playbook you can ssh into the host, source that file and run any monasca cli commands.
        Just remember to limit the boxes you run this on. For example from the deployer:</p>
      <codeblock>
ansible-playbook -i hosts/verb_hosts monasca-cli-dev.yml --limit PADAWANBASE-CCP-T1-M1-NETCLM
ssh PADAWANBASE-CCP-T1-M1-NETCLM
source ~/monasca-env.sh
monasca alarm-definition-list
. . .
monasca metric-list
. . . 
</codeblock>
    </section>
  </body>
</topic>

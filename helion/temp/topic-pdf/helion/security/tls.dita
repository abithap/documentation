<?xml version="1.0" encoding="utf-8"?><?workdir /C:\Users\sharmabi\git\documentation\helion\temp\topic-pdf\helion\security?><?workdir-uri file:/C:/Users/sharmabi/git/documentation/helion/temp/topic-pdf/helion/security/?><?path2project ..\?><?path2project-uri ../?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="topic_yym_nps_4t" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " class="- topic/topic " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="topic:1;3:30">
  <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="title:1;4:10">Enabling TLS for Public Endpoints</title>
  <body class="- topic/body " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="body:1;5:9">

    <section id="intro" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="section:1;7:25">
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:1;8:10">
        <note class="- topic/note " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="note:1;9:15"><b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:1;9:18">THIS DOCUMENT IS IN NO WAY READY FOR GA AND NEEDS MUCH UPDATING. ESPECIALLY WRT TO PORTS LISTED</b></note>
      </p>
      
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:2;12:10">The Transport Layer Security (TLS) protocol, successor of SSL, provides the mechanisms to
        ensure authentication, non-repudiation, confidentiality, and integrity of user
        communications to the HP Helion OpenStack services from public endpoints.</p>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:3;15:10">OpenStack endpoints are HTTP (REST) services providing APIs to other OpenStack services on the
        management network. All traffic to OpenStack services coming in on the public endpoints are
        secured using TLS connections.</p>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:4;18:10">The following secure service endpoints and their associated ports use TLS: [<b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:2;18:89">NOTE THESE
          ENDPOINTS ARE NOT ALL SECURED. REVIEWERS PLEASE NOTE WHICH ARE</b>]</p>
      
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:1;21:18">ceilometer          8777
cinder              8776
glance-api          9292
glance-registry     9191
heat-api            8004
heat-cfn            8000
heat-cloudwatch     8003
horizon             443
keystone-admin      35357
keystone-public     5000
neutron             9696
nova-novncproxy     6080
nova-metadata       8775
nova-api            8774
sherpa              21131
swift-proxy         8080</codeblock>



      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:5;40:10">It is generally recommended that you provide a CA key and certificate generated from a
        well-known certificate authority during the installation process, so trust can be
        established using the certificate chain. This can be either a specific certificate/key
        generated for this deployment, a general certificate/key that is used for test deployments
        by that organization, or a delegated signing certificate from another PKI to enable the use
        of existing trust relationships between users and that PKI. Either way, the deployer must
        provide the CA certificate to the Helion users, to enable secure TLS and prevent certificate
        errors and warnings.</p>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:6;48:10">The CA certificate/key pair must not be reused between deployments at different
        organizations, or in different deployments with differing levels of trust; for example, a
        public, untrusted Helion test system and an internal production system.</p>

    
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:7;53:10">If a self-signed certificate was created during the Helion OpenStack installation, you must
        install the generated certificate in your browser as a trusted CA to prevent messages about
        insecure connections when connecting to the Horizon IP address. This can be done by
        importing the eca.crt file from the seed VM as a trusted CA into your browser software.</p>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:8;57:10">Each client must use this certificate to authenticate the connection. How you achieve this
        will depend on the client you are using. Below are some ways you can achieve this with the
        OpenStack command line tools using the 'nova list' command as an example. The easiest way to
        make sure the clients use this certificate is to set the environmental variable OS_CACERT to
        point to the EPHEMERAL_CA_CERT_FILE that was copied off the seed.</p>

      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:9;63:10">Now when a service call is made, this cert will be used to authenticate the TLS
        connection:</p>
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:2;65:18">nova list</codeblock>
      

      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:10;68:10">Another option is for the clients not to authenticate TLS connections. This is not advised
        as this will mean the identity of the server you are contacting will not be verified.
        However if you want to bypass this check you can use the --insecure option. A certificate is
        not needed then.</p>
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:3;72:18">nova --insecure list</codeblock>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:11;73:10"> An endpoint can be either a virtual IP (VIP) or a back-end service URI. A VIP can be
        public, internal or admin. </p>
    </section>
    <section id="TLS_termination" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="section:2;76:35"><title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="title:2;76:42">TLS termination for a public endpoint VIP </title> HP
      Helion OpenStack® 2.0 supports fully qualified domain names (FQDN) for public endpoints.
      Open the following file and change components to tls-components in
      /home/stack/helion/my_cloud/definition/data/network_groups.yml load-balancers:
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:4;80:18">   - provider: ip-cluster
     name: extlb                      # This is the external LB.
     external-name: myhelion.test     # change this to a resolvable FQDN
     tls-components:
        - default
     roles:
        - public
          cert-file: my-public-cert   # this cert should match the FQDN for authenticated TLS to work</codeblock>
      What this configuration means: <dl class="- topic/dl " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dl:1;88:42">
        <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dlentry:1;89:18">
          <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dt:1;90:15">name: extlb</dt>
          <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dd:1;91:15">The external Loadbalancer (LB)</dd>
        </dlentry>
        <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dlentry:2;93:18">
          <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dt:2;94:15">external-name:</dt>
          <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dd:2;95:15">This name will be used in place of the external VIP address. This name can be an FQDN.
            This will be registered in the public endpoints of the services. The myhelion.test has
            to be</dd>
        </dlentry>
        <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dlentry:3;99:18">
          <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dt:3;100:15">tls-components:</dt>
          <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dd:3;101:15">This list of services will be put behind TLS. Note this is only being done for the LB
            in question, which is the external LB. The components in ‘default’ are those services
            defined under service-components in data/control_plane.yml. If you want to have a finer
            granularity, you can replace default with a list of individual components, as in:
            <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:5;105:24">tls-components: - 'horizon' </codeblock>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dlentry:4;108:18">
          <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dt:4;109:15">cert-file:</dt>
          <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="dd:4;110:15"> the default my-public-cert is already part of the playbook but you can specify your
            own name. When you specify your own you also need to have the certificate copied in
            ~/helion/my_cloud/config/tls/certs on the deployer. </dd>
        </dlentry>
      </dl>
      <note class="- topic/note " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="note:2;115:13">Do not enable TLS to the internal loadbalancer. </note></section>
    <section id="configure_cipher" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="section:3;116:36">
      <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="title:3;117:14">Configuring the cipher suite for public endpoints</title> We have set the default
      cipher suite to be: <codeph class="+ topic/ph pr-d/codeph " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeph:1;118:35">HIGH:!aNULL:!eNULL:!DES:!3DES</codeph>. This is a recommended
      setting from the <xref href="http://docs.openstack.org/security-guide/secure-communication/introduction-to-ssl-and-tls.html" format="html" scope="external" class="- topic/xref " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="xref:1;121:40"><?ditaot usertext?>OpenStack documentation site</xref>.   You may override this.
      Open <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:3;122:15">config/haproxy/defaults.yml</b> and edit it. The parameters would be under
      haproxy_globals list.
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:6;124:18">- "ssl-default-bind-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"
- "ssl-default-server-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"</codeblock>
      Make the changes as needed. It's best to keep the two options identical. </section>
    <section id="new_cert" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="section:4;127:28"><title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="title:4;127:35">Installing a new certificate</title> You should obtain your own
      certificate and install it in the cloud. When this certificate is ready, please do the
      following and rerun the config-processor and reconfigure. Copy the certificate (containing
      both public and private key) to <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:4;130:42">helion/my_cloud/config/tls/certs/ directory</b> </section>
    <section class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="section:5;131:14">Update the new certificate filename in cert-file in
        <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:5;132:12">helion/my_cloud/definition/data/network_groups.yml</b>. If you have already run the
      config-processor-run.yml playbook which is required during installation, run the
        <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="b:6;134:12">config-processor-clean.yml</b> playbook to clear out your previous configuration before
      rerunning the configuration procesor: <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:7;135:56">cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-clean.yml</codeblock>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:12;137:10">Commit your changes to git.</p>
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:8;138:18">cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="p:13;141:10">Rerun the config processor</p>
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\security\tls.dita" xtrc="codeblock:9;142:18">cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
    </section>
   
    <!-- ===================== horizontal rule ===================== -->
    <!-- Tom Cammann, Thom Leggett- SMEs Nova      -->
  </body>
</topic>
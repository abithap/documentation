<?xml version="1.0" encoding="utf-8"?><?workdir /C:\Users\sharmabi\git\documentation\helion\temp\topic-pdf\helion?><?workdir-uri file:/C:/Users/sharmabi/git/documentation/helion/temp/topic-pdf/helion/?><?path2project?><?path2project-uri ./?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="topic_u3v_1yz_ct" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " class="- topic/topic " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="topic:1;3:30">
  <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="title:1;4:10">Using the local git repository for configuration</title>
  <body class="- topic/body " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="body:1;5:9">
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:1;6:8">In HP Helion <tm tmtype="reg" class="- topic/tm " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="tm:1;6:38">OpenStack</tm> 2.0 versions, inclusding Beta1, a local git
      repository is used to track configuration changes and for the config processor to look to for
      configuration changes. The introduction of a git workflow also means that your configuration
      history is maintained, making rollbacks easier as well as keeping a record of previous
      configuration settings.</p>
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:2;11:8">The git repository, which is installed by the deployer, is local to your cloud servers, but
      in other ways functions like a remote git repository.</p>
 
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:3;14:8">Below is a representation of the typical git workflow in HP Helion OpenStack 2.0. </p>
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:4;15:8"><image href="../media/install/gitWorkflow.png" id="image_cbv_wg4_dt" placement="inline" class="- topic/image " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="image:1;15:78"/></p>
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:5;16:9"/>
    <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:6;17:8">The git repository provides a way for you to merge changes that you pull down as "upstream"
      updates, and allows you to manage your own configuration changes. </p>
    <section class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="section:1;19:14">
      <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="title:2;20:14">Initialization on a new deployment</title>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:7;21:10">On a system new to HP Helion OpenStack 2.0, the deployer will prepare a git repository
        under ~/helion. The deployer provisioning runs the hlm-init-deployer script automatically;
        this calls ansible-playbook -i hosts/localhost git-00-initialise.yml.</p>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:8;24:10">As a result, the ~/helion directory is initialized as a git repo (if it's empty). It is
        initialized with four empty branches: <dl class="- topic/dl " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dl:1;25:51">
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:1;26:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:1;27:17">hos</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:1;28:17">This holds the upstream (ie, from HP) source code - that is, what you'll see under
              the ~/helion directory on a pristine fresh installation. Every source code release
              that's downloaded from us is applied as a fresh commit to this branch. This branch
              contains no customisation by the end user.</dd>
          </dlentry>
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:2;33:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:2;34:17">site</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:2;35:17">This branch begins life as a copy of the first 'hos' drop. It is onto this branch
              that you commit your configuration changes. It's the branch most visible to the end
              user.</dd>
          </dlentry>
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:3;39:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:3;40:17">ansible</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:3;41:17">This branch contains the variable definitions that the CP outputs that our main
              ansible playbooks need: the verb_hosts file (which describes to ansible what servers
              are playing what roles), amongst others. The ready-deployment playbook takes this
              output and assembles a 'scratch' directory containing the ansible playbooks together
              with the variable definitions in this branch; the result is a working ansible
              directory from which the main deployment playbooks may be successfully run. </dd>
          </dlentry>
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:4;48:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:4;49:17">cp-persistent</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:4;50:17">This branch contains the persistent state that the CP needs to keep hold of. That
              state is mostly the assignment of IP addresses and roles to particular servers. Some
              operational procedures may involve editing the contents of this brach: for example,
              retiring a machine from service or repurposing it.</dd>
          </dlentry>
        </dl>Two temporary branches are created and populated at run time: <dl class="- topic/dl " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dl:2;55:80">
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:5;56:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:5;57:17">staging-ansible</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:5;58:17">This branch hosts the most recent commit that will be appended to the ansible
              branch.</dd>
          </dlentry>
          <dlentry class="- topic/dlentry " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dlentry:6;61:20">
            <dt class="- topic/dt " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dt:6;62:17">staging-cp-persistent</dt>
            <dd class="- topic/dd " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="dd:6;63:17">This branch hosts the most recent commit that will be appended to the cp-persistent
              branch.</dd>
          </dlentry>
        </dl>
        <note class="- topic/note " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="note:1;67:15">The information above provides insight into the workings of the configuration
          processor and the git repository. However, in practice you can simply follow the steps
          below to make configuration changes.</note>
      </p>
    </section>
    <!--    <section>
      <title>When receiving a new Helion drop</title>
      <note>The steps for new drops will only be run on HP Helion OpenStack 2.0 Beta 1 and later.
        The git repository is not present in Beta 0.</note>
      <p>When you are ready to deploy a new deployer image, you must merge any configuration changes
        into your own previous config; this is a manual step, although the standard git tools may be
        brought to bear to achieve this. </p>
      <p>Behind the scenes, the deployer provisioning runs the following playbooks: <ol>
          <li>ansible-playbook -i hosts/localhost</li>
          <li>deployer-init.yml ansible-playbook</li>
          <li>-i hosts/localhost git-01-receive-new.yml</li>
        </ol> The third playbook puts the new content directly onto the 'hos' branch. After it runs,
        you will notice a new commit on the 'hos' branch with the latest upstream deployer content
        on it. This looks much like the content of the ~/helion directory as it was prior to the
        introduction of the git workflow. The hos branch will be merged to the site branch; if there
        are differences, the merge will require your manual review and commit. </p>
      <p>The ~/helion repo will be checked out to the 'site' branch and the results of the merge
        left in place for your review. You may now edit your configuration until you are happy with
        it on the 'site' branch in ~/helion repository. Note that the deployer simply copies a
        configuration unconditionally to the ~/helion/my_cloud/definition directory and commits it
        there. You must commit any configuration changes prior to continuing; the
        "config-processor-run.yml" script will abort with a message to that effect if that condition
        is not met. As a result of this step, the 'site' branch gets a configuration under the
        my_cloud/definition subdirectory. </p>
      <p>
        <b>Run the configuration processor</b>
      </p>
      <p>Once you have committed configuration settings, you must run the configuration processor,
        which takes as input your configuration, and also any persistent data saved from a previous
        run. (That data contains things such as the allocation of roles to servers, etc.) It
        produces as output a set of ansible variable settings (amongst other input to the ansible
        playbooks); and may update its persistent state. </p>
      <p>To run the configuration processor, you must execute
        <codeblock>ansible-playbook -i hosts/localhost config-proessor-run.yml </codeblock> However,
        the CP persistent state and the ansible outputs now reside on different branches, not
        immediately visible to you. If the config processor run was unsuccessful, you may continue
        to edit and commit to your 'site' branch. An " (dash dash note for comments issue replace with dashes later )amend" commit is acceptable here. </p>
      <p><b>Result</b>
      </p>
      <p>A scratch directory is prepared to run the config processor in (~/scratch/cp). The site
        configuration is checked out into this directory. Atop this is laid any saved persistent
        state for the config processor, which is taken from the head of the 'cp-persistent' branch.
        Updated CP persistent data is temorarily stashed to the 'staging-cp-persistent' branch;
        ansible output to the 'staging-ansible' branch. The reason for this is that, until a
        deployment actually occurs, there is no guarantee that any additional CP state accruing will
        gain any measure of real-world semantics by being used for a deployment. We always reset the
        inputs to the CP to the last *deployed* persistent state. </p>
    </section>
    <section>
      <title>Prepare and run a deployment</title>
      <p>A deployment area is prepared to run an update or a deploy from. At this point we consider
        the staged output from the CP to be 'live' - promoting the commits to the long-lived
        'ansible' and 'cp-persistent' branches. </p>
      <p><b>User experience</b>
      </p>
      <p>The user readies a deployment area by running ansible-playbook -i hosts/localhost
        ready-deployment.yml from the ~/helion/hlm/ansible directory. This will prepare a scratch
        directory with the appropriate contents in it under "~/scratch/ansible/next/hlm/ansible".
        The deployment may be continued via: cd ~/scratch/ansible/next/hlm/ansible ansible-playbook
        -i hosts/verb_hosts site.yml </p>
      <p><b>Technical details</b>
      </p>
      
      <p>The tip of the "staging-ansible" and "staging-cp-persistent" branches are laid down upon
        the "ansible" and "cp-persistent" branches; the former pair are then deleted. The tip of
        "site", "ansible", and "cp-persistent" are tagged with a time-stamped tag to indicate when
        the deployment was readied. Two working areas are laid out underneath ~/scratch/ansible. The
        "next/" directory holds the latest deployment tree. Alongside this, the "last/" directory
        holds the previous tree - that is, the one constructed from the previous timestamps. The
        thinking behind this is that, whilst we currently don't use the former ansible state for
        upgrades, that any topology change will require ansible to know where services _used_ to run
        in order to successfully find and disable them. At the moment, the best use of this
        directory is as a convenient tree to run "diff" from. </p>
    </section>-->
    <section id="updating-configuration-including-default-config" class="- topic/section " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="section:2;146:67">
      <title class="- topic/title " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="title:3;147:14">Updating any configuration, including the default configuration</title>
      <p class="- topic/p " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="p:9;148:10">When you need to make updates to a configuration you must <ol class="- topic/ol " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="ol:1;148:72">
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:1;149:15">Check out the <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="b:1;149:32">site</b> branch. You may aready be on that branch. If so, git will
            tell you that and the command will leave you
            there.<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="codeblock:1;151:30">git checkout site</codeblock>
          </li>
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:2;153:15">Edit the YAML file or files that contain the configuration you want to change. </li>
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:3;154:15">Commit the changes to the <b class="+ topic/ph hi-d/b " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="b:2;154:44">site</b> branch.
            <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="codeblock:2;155:24">git add -A
git commit -m "your commit message goes here in quotes"</codeblock>
          </li>
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:4;158:15"> Run the configuration
            processor:<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="codeblock:3;159:34">cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
</codeblock>
            to produce the required configuration processor output from those changes. Review the
            output files manually if required.</li>
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:5;164:15">Ready the deployment area
            <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="codeblock:4;165:24">ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          <li class="- topic/li " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="li:6;166:15">Run the deployment playbooks from the resulting scratch directory.
            <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="C:\Users\sharmabi\git\documentation\helion\using_git.dita" xtrc="codeblock:5;167:24">cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts site.yml
</codeblock>
          </li>
        </ol>
      </p>
    </section>
  </body>
</topic>
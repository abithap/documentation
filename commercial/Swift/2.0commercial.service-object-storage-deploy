<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_pgx_vcg_5s">
  <title>Deploying and Configuring Object Storage (Swift)</title>
  <body>
    <p>This page provides detailed instructions on the deployment of HP Helion OpenStack Object
      Storage, and their configuration. </p>
    <p>Perform the following steps to deploy Object Storage (Swift)</p>
    <section id="pre-requisite"><b>Prerequisite</b><p>
        <ol id="ol_vyl_52g_5s">
          <li> HP Helion OpenStack deployer node must be installed.</li>
        </ol>
      </p></section>
    <section id="setting-up-cloud-model"><b>Setting up the cloud model</b><p>You must configure the followng information before
        starting your Swift deployment.</p></section>
    <section>
      <p>
        <ul id="ul_ic3_hkg_5s">
          <li>Allocate servers and disk drives</li>
          <li>Allocate networks</li>
          <li>Allocate a Ring -Builder Node</li>
          <li>Specify the rings (ring specifications)</li>
          <?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>
          <li>Making site-specific changes to configuration parameters<?oxy_custom_end?> (not aware
            about this. need input from dev team)</li>
        </ul>
      </p>
    </section>
    <section id="allocate-server-disk"><b>Allocate servers and disk drives</b></section>
    <p>The disk model describes the number of disks on a particular server type and how they are
      used: some are used by the operating system e.g. for the root, log, crash filesystems. While
      other disks are used for swift storage. For a swift system you may have two disk models, one
      that describes the storage on the swift proxy servers (which may hold the account &amp;
      container data) and one for the swift object servers.</p>
    <p>The general structure of a disk model is to specify a number of disk drives/devices and then
      designate that they are "consumed" for a specific purpose. The general syntax is as
      follows:</p>
    <p>
      <codeblock>device-groups:
 
  - name: group_name
    devices:
      -  name: sdc
      -  name: sdd
      -  name: sde
    consumer:
        name: &lt;subsystem>
        attrs:
            &lt;attributes-sepecific-to-subsystem></codeblock>
    </p>
    <example/>
    <p> The DISK_SET_SWIFT_OBJECT disk-model describes a typical object server disk
      layout.<codeblock>disk-models:
  - name: "DISK_SET_SWIFT_OBJECT"
    device-groups:
    # disk node;
      - name: "swiftobj"
        devices:
          - name: "/dev/sdb"
          - name: "/dev/sdc"
          - name: "/dev/sdd"
          - name: "/dev/sde"
          - name: "/dev/sdf"
        consumer:
          name: swift
          attrs:
            rings:
              - object-0</codeblock></p>
    <example/>
    <p>Then you have the server-role model, this maps the disk-model to a particular server type.
      For example take a look at the ROLE-OBJECT type in the following example which specifies a
      disk-model
      DISK_SET_SWIFT_OBJECT.<codeblock>  server-roles:

    - name: "ROLE-CCP"
      interface-model: "INTERFACE_SET_3"
      disk-model: "DISK_SET_CONTROLLER"

    - name: "ROLE-RCP"
      interface-model: "INTERFACE_SET_3"
      disk-model: "DISK_SET_CONTROLLER"

    - name: "ROLE-RCP-SWIFT"
      interface-model: "INTERFACE_SET_3"
      disk-model: "DISK_SET_SWIFT_PAC"

    - name: "ROLE-COMPUTE"
      interface-model: "INTERFACE_SET_3"
      disk-model: "DISK_SET_COMPUTE"

    - name: "ROLE-OBJECT"
      interface-model: "INTERFACE_SET_3"
      disk-model: "DISK_SET_SWIFT_OBJECT"</codeblock></p>
    <p>For the Object Store, the <b>subsystem</b> is "swift". The <b>attrs</b> must contain an item
      called <b>rings</b>. The <b>rings</b> item contains a list of ring names. For
      example:<codeblock>device-groups:
 
  - name: swiftdevices
    devices:
      -  name: sdc
      -  name: sdd
      -  name: sde
    consumer:
        name: swift
        attrs:
            rings:
              -  name: account
              -  name: container
              -  name: object-0</codeblock></p>
    <p>You can interpret these directives as follows:</p>
    <ul id="ul_cxs_rng_5s">
      <li>A server using this disk model, has at least three drives: /dev/sdc, /dev/sdd and
        /dev/sde. It may have other drives. In addition, in this exmaple, other drives may be
        allocated to other subsystems or used as the boot device. They are not shown here. If a
        device is not present in the disk mode, but exists on a server, it will not be used.
        Conversely, if a device is listed in a disk model and is not present in the server, the
        deployment will fail. You should either add the device or change the disk model so the
        device is not mentioned.</li>
      <li>The device-group name is informative and has no effect on how the Object Storage system
        uses the drives.</li>
      <li>The sdc, sdd and sde drives are used by and dedicated to the Object Storage system</li>
      <li>The devices are used by the account, container and object-0 rings.. Rings are described in
        "Specifying the rings (ring specifications)".</li>
    </ul>
    <p>You are given a number of example disk models. You are free to modify or edit the disk models
      to suite your usage of the system. For example, given the same set of drives, you might
      allocate devices to rings in a different topology as
      follows:<codeblock>device-groups:
 
  - name: metadata
    devices:
      -  name: sdc
    consumer:
        name: swift
        attrs:
            rings:
              -  name: account
              -  name: container
 - name: data
 devices:
      -  name: sdd
      -  name: sde
    consumer:
        name: swift
        attrs:
            rings:
              -  name: object-0
              -  name: object-1</codeblock></p>
    <p>In this model, /dev/sdc is used by account and container rings, whereas /dev/sdd and /dev/sde
      are devoted to object storage using two different storage policies (object-0 and
      object-1).</p>
    <section><b>Allocate networks </b><p>information required</p></section>
    <section><b>Allocate a Ring -Builder Node</b></section>
    <section>
      <p/>
    </section>
    <section><b>Specify Ring</b><p>The ring maps the llogical names of data to locations on
        particular disks. There is a separate ring for account database, account database, and
        individual objects, but each rings works in the similarly. The rings are built and managed
        manually by a utility called the ring-builder. The ring-builder also keeps its own builder
        file with the ring information and additional data required to build future rings</p><p>You
        can specify the ring in the input model using the ring specification key. Also, there is an
        entry for each distinct Swift System. Therefore, in the input model specify the keystone
        region name in the specified <b>region-name</b>. </p><p>The example file of the
        ring-specification is location in <codeph>config/swift/rings.yml</codeph>.</p></section>
    <example>
      <codeblock>ring-specifications:
    - region-name: region1
      rings:
        - name: account
          display-name: Account Ring
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3
        - name: container
          display-name: Container Ring
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3
        - name: object-0
          display-name: General
          default: yes
          min-part-time: 24
          partition-power: 17
          replication-policy:
            replica-count: 3</codeblock>
    </example>
    <p>In the above example shows that region1 has three rings as follows:</p>
  </body>
</topic>

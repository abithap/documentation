<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic3091">
<title>HP Helion 1.1 Development Platform: ALS Router</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HP Helion Development Platform"/>
<othermeta name="product-version" content="HP Helion Development Platform 1.1"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Network Administrator"/>
<othermeta name="role" content="Systems Administrator"/>
<othermeta name="role" content="Security Engineer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HP Helion Development Platform"/>
<othermeta name="product-version2" content="HP Helion Development Platform 1.1"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/helion/admin/server/1.1router.md-->
 <!--permalink: /helion/devplatform/1.1/als/admin/server/router/--></p>
<p>

The Application Lifecycle Service Router role manages HTTP and HTTPS traffic between web clients and application instances. In conjunction with the Cloud
Controller, it maps application URLs to the corresponding application
instances running in Linux containers on DEA nodes, distributing load
between multiple instances (containers) as required.</p>
<ul>
<li>
<xref type="section" href="#topic3091/settings">Settings</xref>
</li>
<li>
<xref type="section" href="#topic3091/websockets">WebSockets</xref>
</li>
<li>
<xref type="section" href="#topic3091/router-spdy">SPDY</xref>
</li>
</ul>
<p>Application Lifecycle Service's default router ('router2g') supports
<xref href="http://www.websocket.org/aboutwebsocket.html" scope="external" format="html" >WebSocket</xref> (including
"wss://" secure web sockets) and <xref href="http://www.chromium.org/spdy" scope="external" format="html" >SPDY</xref>.</p>
<section id="settings"> <title>Settings</title>
<p>The Router is configured using <xref href="../../../../devplatform/helion/admin/reference/1.1kato-ref.dita#kato-command-ref-config" type="section"  >
<i>kato config</i>
</xref>. The following settings are configurable:</p>
<p>
<b>client_inactivity_timeout</b>: time (in seconds) the router waits
for idle clients (default 1200 seconds). To change this:</p>
<codeblock>
  <codeph>kato config set router2g client_inactivity_timeout 2400
</codeph>
</codeblock>
<p>
<b>backend_inactivity_timeout</b>: time (in seconds) the router waits
for applications to respond (default 1200 seconds). To change this:</p>
<codeblock>
  <codeph>kato config set router2g client_inactivity_timeout 2400
</codeph>
</codeblock>
<p>
<b>prevent_x_spoofing</b> (true|false): Enable HTTP "X-" header
spoofing prevention (default 'true'). When enabled, the router
discards all X- headers sent by the client (e.g. X-Forwarded-For,
X-Forwarded-proto, X-Real-IP, etc.) and replaces them with values
determined by the router itself. Set this option to 'false' only if the routers are behind a load balancer which terminates SSL connections; in this scenario, the router will trust the X-headers set by the load balancer.</p>
<p>To enable:</p>
<codeblock>
  <codeph>kato config set router2g prevent_x_spoofing true --json
</codeph>
</codeblock>
<p>
<b>session_affinity</b> (true|false - disabled/unset by default):
Enable sticky session support on the router. Overrides normal
round-robin load balancing for clients with JSESSIONID, SESSIONID,
or PHPSESSID cookies set (configurable in the router's
<i>config/local.json</i> file), routing those clients to specific
application instances. If the backend assigned on the first request
goes down, a new one is automatically assigned. Clients can delete
their sticky session assignment by removing the
HELION_SESSION_AFFINITY cookie.</p>
<p>
<b>x_frame_options</b>: Prevent clickjacking on requests with
<xref href="https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options" scope="external" format="html" >X-Frame response
header</xref>
configuration. Disabled if empty (default). Valid values are:</p>
<ul>
<li>DENY</li>
<li>SAMEORIGIN</li>
<li>ALLOW_FROM \&lt;uri&gt;</li>
</ul>
<p>For example:</p>
<codeblock>
  <codeph>   kato config set router2g x_frame_options SAMEORIGIN
</codeph>
</codeblock>
<p>
  <b>Note</b>
</p>
<p>Alternatively, end user applications can employ
<xref href="http://en.wikipedia.org/wiki/Framekiller" scope="external" format="html" >framekiller</xref> JavaScript
snippets to help prevent frame based clickjacking.</p>
</section>
<section id="websockets"> <title>WebSockets</title>
<p>Applications using web sockets must use the VCAP_APP_PORT or PORT
<xref href="../../../../devplatform/helion/user/reference/1.1environment.dita#environment-variables" type="section"  >
<i>environment variables</i>
</xref>
to set the default listener port of the WebSocket server.</p>
</section>
<section id="router-spdy"> <title>SPDY</title>
<p>
<xref href="http://dev.chromium.org/spdy/" scope="external" format="html" >SPDY</xref> is a protocol developed by Google
for reducing web page load time. The router supports SPDY versions 2 and
3. Applications can use SPDY over any HTTPS connection, so long as the
connection consumers (the application server and browser) support it.</p>
</section>
</body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="HP2.0DNSaaS">
  <title>HPE Helion 2.0 Development Platform: DNSaaS Installation and Configuration</title>
  <body>
    <p>Our managed DNS service, based on the OpenStack Designate project, is engineered to help you
      create, publish, and manage your DNS zones and records securely and efficiently for either a
      public or private DNS server network.</p>
    <section id="Prerequisites">
      <title>Prerequisites</title>
      <ul>
        <li>HPE Helion OpenStack 2.0 installation must be completed. You must know the location of
          its <codeph>keystone.osrc</codeph> file, which contains configuration information.</li>
        <li>You must know the NTP server and DNS server IP addresses.</li>
        <li>Credentials of the User and Tenant where the service is to be deployed ("Target
          Credentials")</li>
        <li>"openrc" credentials file for the Target user and project
          <!--why this file?: the values don't seem to be used anywhere in the process?--></li>
        <li>The v2 CLI must be installed on all nodes due to client differences</li>
      </ul>
    </section>

    <section>
      <title>Download Files</title>
      <ol>
        <li>Navigate to the <xref href="https://helion.hpwsportal.com/catalog.html#/Home/Show"
            format="html" scope="external">HPE Helion Download Network</xref> (HDN) and log in. If
          necessary, create an account first.</li>
        <li>Download the <xref scope="external" format="html"
            href="http://pinafore.usa.hp.com/paas-2.0/dnsaas-2.0/QA1/dnsaas-2.0.0-b.1-20151005T183829Z.tgz"
            >DNSaaS Deployer Tarball</xref>. (dnsaas-2.0.0-b.1-20151005T183829Z.tgz)</li>
        <li>Download the <xref scope="external" format="html"
            href="http://pinafore.usa.hp.com/paas-2.0/dnsaas-2.0/QA1/dnsaas-2.0.0-b.1_cloud-1.0.20151005T152959Z.qcow2"
            >DNSaaS Cloud Image</xref>. (dnsaas-2.0.0-b.1_cloud-1.0.20151005T152959Z.qcow2)</li>
      </ol>
    </section>

    <section id="PrerequisiteCredentials">
      <title>Creating the Prerequisite Credentials</title>
      <p>Target credentials are the credentials of the user and project where the service is to be
        deployed. Target credentials include a project name and a username. Service credentials can
        only be created after the Target credentials have been successfully created. </p>
      <ol>
        <li>SSH to the HPE Helion OpenStack deployer.</li>
        <li>Source the keystone.osrc file. <codeblock>$ source keystone.osrc</codeblock></li>
        <li>Create the DNSaaS project. Make a note of the ID field
          value.<codeblock>$ openstack project create dnsaas
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description |                                  |
| domain_id   | default                          |
| enabled     | True                             |<b>
| id          | a6c8339e816c4f4fb9118b31e2e101ad |</b>

[ OUPUT TRIMMED]</codeblock></li>
        <li>Create a dnsaas user.
          <codeblock>$ openstack user create dnsaas --password password --email dnsaas@example.com --project dnsaas</codeblock></li>
        <li>Add roles to the dnsaas user.
          <codeblock>$ openstack role add --project dnsaas --user dnsaas _member_
$ openstack role add --project dnsaas --user dnsaas admin</codeblock></li>
        <li>You can view the roles with <codeph>role list</codeph>.
          <codeblock>$ openstack role list</codeblock></li>
      </ol>
    </section>

    <section id="CredentialsFile">
      <title>DNSaaS User and Project Credentials</title>
      <p>Prepare the credentials files for the DNSaaS user and project.</p>
      <codeblock>$ cat &lt;&lt;EOF &gt; dnsaas.osrc
unset OS_DOMAIN_NAME
export OS_IDENTITY_API_VERSION=3
export OS_AUTH_VERSION=3
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_ENDPOINT_TYPE=internalURL
export OS_INTERFACE=internal
export OS_CACERT=/etc/ssl/certs/ca-certificates.crt
export OS_PROJECT_NAME=dnsaas
export OS_USERNAME=dnsaas
export OS_PASSWORD=password
export OS_AUTH_URL=http://192.168.245.5:35357/v3
EOF</codeblock>
    </section>
    <section id="PreparingTheDeployer">
      <title>Prepare the Deployer VM</title>
      <sectiondiv>
        <b>Preparing to boot the Deployer VM</b>
        <p>You must publish the DNSaaS Cloud Image to the target project/tenant before proceeding to
          the next step. </p><ol>
          <li>Update your environment. <codeblock>$ source dnsaas.osrc</codeblock></li>
          <li>Create image. Make a note of the value of the <codeph>owner</codeph> parameter and the
              <codeph>DNS Cloud Image ID</codeph>
            value.<codeblock>$ glance image-create --name "dnsaas-2.0.0-b.1_cloud-1.0.20151005T152959Z" \
--file "dnsaas-2.0.0-b.1_cloud-1.0.20151005T152959Z.qcow2" \
--is-public False \
--disk-format qcow2 \
--container-format bare       </codeblock></li>
          <li>Identify the SVC network ID. Make a note of the SVC ID
            value.<codeblock>$ neutron net-show SVC 
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| id                        | &lt;service ID Value>                   |

[ OUTPUT TRIMMED ] </codeblock></li>
          <li>Upload the SSH keypair.
            <codeblock>$ nova keypair-add --pub-key dns_shared.pub dns-shared</codeblock></li>
          <li>You can view the keypair information with <codeph>keypair-show</codeph>.
            <codeblock>$ nova keypair-show dns-shared</codeblock></li>
          <li>Ensure the default security group is correctly configured. You will need the ID value
            from the "create the project"
            step.<codeblock>$ neutron security-group-list --tenant-id &lt;value of the owner parameter></codeblock></li>
          <li>Create security group rules.
            <codeblock>$ neutron security-group-rule-create \
          --tenant-id &lt;value of the owner parameter from OpenStack Project Create command> \
          --protocol TCP \
          --remote-ip-prefix 0.0.0.0/0 \
          --port-range-min 22 \
          --port-range-max 22 \
          &lt;default security group rule ID>

$ neutron security-group-rule-create \
          --tenant-id &lt;value of the project ID parameter from the OpenStack Project Create command> \
          --protocol TCP \
          --remote-ip-prefix 0.0.0.0/0 \
          --port-range-min 79 \
          --port-range-max 79 \
          &lt;default security group rule ID>        </codeblock></li>
          <li>You can view the security groups with <codeph>security_group_list</codeph>
            <codeblock>$ neutron security-group-list --tenant-id &lt;project ID></codeblock></li>
        </ol></sectiondiv><sectiondiv>
        <b>Booting the Deployer VM and Uploading the Deployer Tarball</b>
        <ol>
          <li>Boot the Deployer VM.
            <codeblock>$ nova boot --poll \
          --nic net-id=&lt;SVC ID Value> \   # SVC Network ID
          --image &lt;DNS Cloud Image ID>\   # DNSaaS Cloud Image ID
          --key-name dns-shared \         # Keypair Name
          --flavor m1.small \
          dnsaas-deployer        </codeblock></li>
          <li>Display the dnsaas-deployer. Make a note of the SVC-NET IP
            Address.<codeblock>$ nova show dnsaas-deployer</codeblock></li>
          <li>Copy the dnsaas image.
            <codeblock>$ scp -i dns_shared dnsaas-2.0.0-b.1-20151005T183829Z.tgz stack@&lt;SVC-NET IP Address>:~</codeblock></li>
        </ol></sectiondiv><sectiondiv>
        <b>Login and Initialize the Deployer VM</b>
        <ol>
          <li>Login to the deployer.
            <codeblock>$ ssh -i dns_shared stack@&lt;SVC-NET IP Address></codeblock> You will need
            to extract the dnsaas tar file and execute the dns-init.bash script.
            <codeblock>$ tar xf dnsaas-2.0.0-b.1-20151005T183829Z.tar
$ cd dnsaas-2.0.0-b.1/
$ ./dnsaas-init.bash 
[ OUTPUT TRIMMED ]

+ ssh-keygen -q -t rsa -f id_rsa
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 

[ OUTPUT TRIMMED ]

# Do not continue with the installation steps that appear here
# Ignore this next line.
To continue installation copy your cloud layout to: /home/stack/helion/my_cloud/definition      </codeblock></li>
        </ol>
      </sectiondiv>
    </section>

    <section id="PrepareDeployment">
      <title>Prepare the Deployment</title><sectiondiv>
        <b>Select an Example Deployment Model</b>
        <p>HPE Helion OpenStack DNSaaS has several example models that can be deployed. In the
          following example, the <i>powerdns</i> example deployment model is used.</p><note
          type="important">The <codeph>cp</codeph> command must be used exactly as shown - including
          the /* on the end of the example model
        path.</note><codeblock>$ cd ~/helion
$ cp -r examples/powerdns/* my_cloud/definition/
$ git add -A
$ git commit -a -m "Add DNSaaS Example Model" </codeblock>
      </sectiondiv>
      <sectiondiv>
        <b>Customize the Example Deployment Model</b>
        <ol>
          <li>You will need to change directories to the my_cloud/definition directory and run nano
            to configure your DNS and NTP servers.
            <codeblock>$ cd my_cloud/definition/
$ nano cloudConfig.yml                                           </codeblock></li>
          <li>Run the ansible-playbook on the HPE Helion OpenStack
            deployer.<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts platform-pass-through.yml -e pass_through_key=""        </codeblock></li>
          <li> Copy the contents of the <codeph>pass-through.yml</codeph> file as follows:<ul>
              <li>Copy <b>from</b>: &lt;<b>HOS</b> deployer&gt;:~/platform-pass-through.yml </li>
              <li>Copy <b>to</b>: &lt;<b>DNSaaS</b> deployer&gt;
                ~/helion/my_cloud/definition/data/pass-through/hos.yml</li>
            </ul>
          </li>
          <li>Run the Pre-Installation Playbook <p>Copy the ~/dnsaas.osrc file from the HPE Helion
              OpenStack deployer. At the end of each playbook, ensure both "unreachable" and
              "failed" are zero.</p>
            <codeblock>$ source ~/dnsaas.osrc
$ cd ~/helion/hos/ansible/
$ ansible-playbook -i hosts/localhost hlm-pre-install.yml</codeblock>
          </li>
        </ol>
      </sectiondiv>
      
      <sectiondiv>
        <p><b>Create SSL Certificates</b></p>
        <p>If you want to install a self-signed certificate that meets the needs of HPE Helion
          OpenStack and HPE Helion Development Platform, follow the steps outlined in the FQDN-based
          Certificate section. If you want to create an IP-address Certificate follow the steps in
          the IP-Address Certificate section.</p>
        
        <p>FQDN-based Certificate</p>
        <p>You will need a real or fictional domain name e.g. "your.domain.com" and it must
              match across the next 3 steps. </p>
        <ol>
          <li>Create a Certificate Signing Request (CSR) with a defined subject.
            <codeblock>cd ~
openssl req -nodes -days 365 -newkey rsa:2048 -keyout my-public-cert.key -out my-public-cert.csr -text \
    -subj '/C=US/O=Helion Test Certificate/CN=your.domain.com/emailAddress=test@example.org/'
            </codeblock></li>
          <li>Create a file containing v3 extensions Ensure that the DNS entry matches any CN
                entry above and provide your IP address. The IP address is what is used by HPE
                Helion Development Platform and the DNS is used by HPE Helion OpenStack. <note>The
                  IP address must be the same in DNS: and IP:</note>
            <codeblock>$ cat &gt; v3_ext.cnf &lt;&lt; EOF
[ v3_req ]
subjectAltName=DNS:your.domain.com
EOF
            </codeblock></li>
            <li>Self-sign your certificate.
              <codeblock>$ openssl x509 -extfile v3_ext.cnf -extensions v3_req -in my-public-cert.csr -signkey my-public-cert.key -req -out my-public-cert.crt -text</codeblock></li>
            <li>Installing the Certificate. 
              <note>If you are using a FQDN - Create or obtain a
                  certificate to match the domain name you are going to use.</note>
              <ul>
               <li>Join the private and public keys into "my-cert-file" at the required location.
                <codeblock>$ cat my-public-cert.key my-public-cert.crt > ~/helion/my_cloud/config/tls/certs/my-public-cert</codeblock>
               </li>
               <li>Edit network_groups.yml, locate a line containing <codeph>name: extlb</codeph>.  
                  Add the following lines at the same indentation level as <codeph>name: extlb</codeph>
                  <codeblock>external-name: your.domain.name
        cert-file: my-public-cert</codeblock></li>
               <li>Rename the "components" section of the extlb for a "tls-components" section, activating TLS on all external components.
                  <codeblock>$ nano ~/helion/my_cloud/definition/data/pass-through$network_groups.yml</codeblock></li>
               <li>Add changes to git.
                  <codeblock>$ git add hos/ansible/roles/tls-frontend/files/my-public-cert  my_cloud/definition/data/network_groups.yml
$ git diff ^HEAD my_cloud/definition/data/network_groups.yml
# --- Output example ---
 - hostname: false
   hostname-suffix: ext
   load-balancers:
-  - components:
+  - tls-components:
     - default
     external-ip: 172.31.0.2
     name: extlb
+    cert-file: my-public-cert
+    external-name: your.domain.name
     provider: ip-cluster
     roles:
     - public
                    
$ git commit -m"Configure SSL certificate"
                  </codeblock>
                </li>
                <li>Commit changes to git.
                  <codeblock>$ git commit -m"Configure SSL certificate"</codeblock>
                </li>
              </ul>
            </li>
          </ol>
        
        <p>IP-Address Certificate</p>
        <ol>
          <li>Identify the external IP Address.
            <codeblock>grep 'external-ip' ~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
          </li>
          <li>Create a Certificate Signing Request (CSR) with a defined subject.
            <codeblock>stack@dnsaas-deployer:~$ cd ~
stack@dnsaas-deployer:~$ openssl req -nodes -days 365 -newkey rsa:2048 -keyout my-public-cert.key -out my-public-cert.csr -text \
  -subj '/C=US/O=Helion Test Certificate/CN=&lt;EXTERNAL_IP_ADDRESS&gt;/emailAddress=test@example.org/'</codeblock>
          </li>
          <li>Create a file containing v3 extensions Ensure that the DNS entry matches any CN entr above and provide your IP address.
            <note>The IP address must be the same in DNS: and IP:
              The IP address is what is used by HPE Helion Development Platform and the DNS is used by HPE Helion OpenStack.</note>
            <codeblock>stack@dnsaas-deployer:~$ cat &gt; v3_ext.cnf &lt;&lt; EOF
[ v3_req ]
subjectAltName=DNS:&lt;EXTERNAL_IP_ADDRESS&gt;, IP:&lt;EXTERNAL_IP_ADDRESS&gt;
[ alt_names ]
IP.1 = &lt;EXTERNAL_IP_ADDRESS&gt;
DNS.1 = &lt;EXTERNAL_IP_ADDRESS&gt;
EOF</codeblock>
          </li>
          <li>Self-sign your certificate.
            <codeblock>$ openssl x509 -extfile v3_ext.cnf -extensions v3_req -in my-public-cert.csr -signkey my-public-cert.key -req -out my-public-cert.crt -text
            </codeblock>
          </li>
          <li>Installing the Certificate.
            <note>If you are using a FQDN - Create or obtain a
              certificate to match the domain name you are going to use.</note>
            <ul>
              <li>Join the private and public keys into "my-cert-file" at the required location.
                <codeblock>$ cat my-public-cert.key my-public-cert.crt > ~/helion/my_cloud/config/tls/certs/my-public-cert</codeblock>
              </li>
              <li>Edit network_groups.yml, locate a line containing <codeph>name: extlb</codeph>.  
                  Add the following lines at the same indentation level as <codeph>name: extlb</codeph>
                  <codeblock>cert-file: my-public-cert</codeblock>
              </li>
              <li>Rename the "components" section of the extlb for a "tls-components" section, activating TLS on all external components.
                <codeblock>$ nano ~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
              </li>
              <li>Add changes to git.
                <codeblock>$ git add hos/ansible/roles/tls-frontend/files/my-public-cert  my_cloud/definition/data/network_groups.yml
$ git diff ^HEAD my_cloud/definition/data/network_groups.yml
# --- Output example ---
 - hostname: false
   hostname-suffix: ext
   load-balancers:
-  - components:
+  - tls-components:
     - default
     external-ip: 172.31.0.2
     name: extlb
+    cert-file: my-public-cert
     provider: ip-cluster
     roles:
     - public</codeblock>
              </li>
              <li>Commit changes to git.
                <codeblock>$ git commit -m"Configure SSL certificate"</codeblock>
              </li>
            </ul>
          </li>
        </ol>
      </sectiondiv>
      
      <sectiondiv>
        <p><b>Save Configured Deployment Model</b></p>
        <ol>
          <li>Add your changes to Git. <codeblock>$ cd ~/helion
$ git commit -a -m "Configured Deployment Model"      
$ git status </codeblock>
            <note>Make sure that there are no other files which are not committed to the Git
              repository. If there are, begin troubleshooting.</note></li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <b>Run the Configuration Processor</b>
        <p>At the end of each playbook, ensure both "unreachable" and "failed" are
          zero.</p><note>When asked for a encryption key, simply leave the value blank, pressing
          enter 4 times to
        proceed.</note><codeblock>$ ansible-playbook -i hosts/localhost config-processor-run.yml </codeblock>
      </sectiondiv><b>Run the Ready Deployment Playbook</b>
      <p>At the end of each playbook, ensure both "unreachable" and "failed" are
      zero.</p><codeblock>$ ansible-playbook -i hosts/localhost ready-deployment.yml </codeblock>
    </section>

    <section id="PerformDeployment">
      <title>Perform the Deployment</title>
      <sectiondiv>
        <b>Run the Boot Infrastructure Playbook</b>
        <p>Once this is complete, all in-cloud infrastructure (VMs, Networks, Routers, Floating IPs
          etc) will have been created.</p><note>This step takes approximately 15 minutes to
          run.</note><codeblock>$ cd ~/scratch/ansible/next/hos/ansible

# Choose between single or multiple control plane.  You only need to execute one or the other, do not run both.          

# a) Multiple control plane nodes
$ ansible-playbook -i hosts/localhost hlm-boot-infra.yml
          
# b) Single control plane
$ ansible-playbook -i hosts/localhost hlm-boot-infra.yml -e neutron_router_ha=False</codeblock>
      </sectiondiv>
      <sectiondiv>
        <p id="RunSitePlay"><b>Run the Site Playbook</b></p>
        <note type="caution">Unlike all the previous ansible play's, the inventory file supplied to
          this play is <b>hosts/verb_hosts</b> and not <b>hosts/localhost</b>.</note>
        <note>This step take approximately 15 to 20 minutes to complete.</note>
        <codeblock>$ ansible-playbook -i hosts/verb_hosts site.yml</codeblock>
      </sectiondiv>
    </section>
  </body>
</topic>
